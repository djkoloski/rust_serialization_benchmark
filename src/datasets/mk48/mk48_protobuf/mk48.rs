// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 31.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `mk48.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:prost.mk48.Vector2f)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vector2f {
    // message fields
    // @@protoc_insertion_point(field:prost.mk48.Vector2f.x)
    pub x: f32,
    // @@protoc_insertion_point(field:prost.mk48.Vector2f.y)
    pub y: f32,
    // special fields
    // @@protoc_insertion_point(special_field:prost.mk48.Vector2f.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vector2f {
    fn default() -> &'a Vector2f {
        <Vector2f as ::protobuf::Message>::default_instance()
    }
}

impl Vector2f {
    pub fn new() -> Vector2f {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Vector2f| { &m.x },
            |m: &mut Vector2f| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Vector2f| { &m.y },
            |m: &mut Vector2f| { &mut m.y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vector2f>(
            "Vector2f",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vector2f {
    const NAME: &'static str = "Vector2f";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.x = is.read_float()?;
                },
                21 => {
                    self.y = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 4;
        }
        if self.y != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vector2f {
        Vector2f::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vector2f {
        static instance: Vector2f = Vector2f {
            x: 0.,
            y: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vector2f {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vector2f").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vector2f {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector2f {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.mk48.Transform)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Transform {
    // message fields
    // @@protoc_insertion_point(field:prost.mk48.Transform.altitude)
    pub altitude: i32,
    // @@protoc_insertion_point(field:prost.mk48.Transform.angle)
    pub angle: u32,
    // @@protoc_insertion_point(field:prost.mk48.Transform.position)
    pub position: ::protobuf::MessageField<Vector2f>,
    // @@protoc_insertion_point(field:prost.mk48.Transform.velocity)
    pub velocity: i32,
    // special fields
    // @@protoc_insertion_point(special_field:prost.mk48.Transform.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transform {
    fn default() -> &'a Transform {
        <Transform as ::protobuf::Message>::default_instance()
    }
}

impl Transform {
    pub fn new() -> Transform {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "altitude",
            |m: &Transform| { &m.altitude },
            |m: &mut Transform| { &mut m.altitude },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angle",
            |m: &Transform| { &m.angle },
            |m: &mut Transform| { &mut m.angle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector2f>(
            "position",
            |m: &Transform| { &m.position },
            |m: &mut Transform| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "velocity",
            |m: &Transform| { &m.velocity },
            |m: &mut Transform| { &mut m.velocity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transform>(
            "Transform",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transform {
    const NAME: &'static str = "Transform";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.altitude = is.read_int32()?;
                },
                16 => {
                    self.angle = is.read_uint32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                32 => {
                    self.velocity = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.altitude != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.altitude);
        }
        if self.angle != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.angle);
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.velocity != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.velocity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.altitude != 0 {
            os.write_int32(1, self.altitude)?;
        }
        if self.angle != 0 {
            os.write_uint32(2, self.angle)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.velocity != 0 {
            os.write_int32(4, self.velocity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transform {
        Transform::new()
    }

    fn clear(&mut self) {
        self.altitude = 0;
        self.angle = 0;
        self.position.clear();
        self.velocity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transform {
        static instance: Transform = Transform {
            altitude: 0,
            angle: 0,
            position: ::protobuf::MessageField::none(),
            velocity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transform {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transform").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transform {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.mk48.Guidance)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Guidance {
    // message fields
    // @@protoc_insertion_point(field:prost.mk48.Guidance.angle)
    pub angle: u32,
    // @@protoc_insertion_point(field:prost.mk48.Guidance.submerge)
    pub submerge: bool,
    // @@protoc_insertion_point(field:prost.mk48.Guidance.velocity)
    pub velocity: i32,
    // special fields
    // @@protoc_insertion_point(special_field:prost.mk48.Guidance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Guidance {
    fn default() -> &'a Guidance {
        <Guidance as ::protobuf::Message>::default_instance()
    }
}

impl Guidance {
    pub fn new() -> Guidance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angle",
            |m: &Guidance| { &m.angle },
            |m: &mut Guidance| { &mut m.angle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "submerge",
            |m: &Guidance| { &m.submerge },
            |m: &mut Guidance| { &mut m.submerge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "velocity",
            |m: &Guidance| { &m.velocity },
            |m: &mut Guidance| { &mut m.velocity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Guidance>(
            "Guidance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Guidance {
    const NAME: &'static str = "Guidance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.angle = is.read_uint32()?;
                },
                16 => {
                    self.submerge = is.read_bool()?;
                },
                24 => {
                    self.velocity = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.angle != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.angle);
        }
        if self.submerge != false {
            my_size += 1 + 1;
        }
        if self.velocity != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.velocity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.angle != 0 {
            os.write_uint32(1, self.angle)?;
        }
        if self.submerge != false {
            os.write_bool(2, self.submerge)?;
        }
        if self.velocity != 0 {
            os.write_int32(3, self.velocity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Guidance {
        Guidance::new()
    }

    fn clear(&mut self) {
        self.angle = 0;
        self.submerge = false;
        self.velocity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Guidance {
        static instance: Guidance = Guidance {
            angle: 0,
            submerge: false,
            velocity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Guidance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Guidance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Guidance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Guidance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.mk48.Contact)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Contact {
    // message fields
    // @@protoc_insertion_point(field:prost.mk48.Contact.damage)
    pub damage: u32,
    // @@protoc_insertion_point(field:prost.mk48.Contact.entity_id)
    pub entity_id: u32,
    // @@protoc_insertion_point(field:prost.mk48.Contact.entity_type)
    pub entity_type: ::std::option::Option<::protobuf::EnumOrUnknown<EntityType>>,
    // @@protoc_insertion_point(field:prost.mk48.Contact.guidance)
    pub guidance: ::protobuf::MessageField<Guidance>,
    // @@protoc_insertion_point(field:prost.mk48.Contact.player_id)
    pub player_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:prost.mk48.Contact.reloads)
    pub reloads: ::std::vec::Vec<bool>,
    // @@protoc_insertion_point(field:prost.mk48.Contact.transform)
    pub transform: ::protobuf::MessageField<Transform>,
    // @@protoc_insertion_point(field:prost.mk48.Contact.turret_angles)
    pub turret_angles: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:prost.mk48.Contact.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Contact {
    fn default() -> &'a Contact {
        <Contact as ::protobuf::Message>::default_instance()
    }
}

impl Contact {
    pub fn new() -> Contact {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "damage",
            |m: &Contact| { &m.damage },
            |m: &mut Contact| { &mut m.damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &Contact| { &m.entity_id },
            |m: &mut Contact| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "entity_type",
            |m: &Contact| { &m.entity_type },
            |m: &mut Contact| { &mut m.entity_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Guidance>(
            "guidance",
            |m: &Contact| { &m.guidance },
            |m: &mut Contact| { &mut m.guidance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_id",
            |m: &Contact| { &m.player_id },
            |m: &mut Contact| { &mut m.player_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "reloads",
            |m: &Contact| { &m.reloads },
            |m: &mut Contact| { &mut m.reloads },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Transform>(
            "transform",
            |m: &Contact| { &m.transform },
            |m: &mut Contact| { &mut m.transform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "turret_angles",
            |m: &Contact| { &m.turret_angles },
            |m: &mut Contact| { &mut m.turret_angles },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Contact>(
            "Contact",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Contact {
    const NAME: &'static str = "Contact";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.damage = is.read_uint32()?;
                },
                16 => {
                    self.entity_id = is.read_uint32()?;
                },
                24 => {
                    self.entity_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.guidance)?;
                },
                40 => {
                    self.player_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_bool_into(&mut self.reloads)?;
                },
                48 => {
                    self.reloads.push(is.read_bool()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transform)?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.turret_angles)?;
                },
                64 => {
                    self.turret_angles.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.damage != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.damage);
        }
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.entity_id);
        }
        if let Some(v) = self.entity_type {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.guidance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_id {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::vec_packed_bool_size(6, &self.reloads);
        if let Some(v) = self.transform.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(8, &self.turret_angles);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.damage != 0 {
            os.write_uint32(1, self.damage)?;
        }
        if self.entity_id != 0 {
            os.write_uint32(2, self.entity_id)?;
        }
        if let Some(v) = self.entity_type {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.guidance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.player_id {
            os.write_uint32(5, v)?;
        }
        os.write_repeated_packed_bool(6, &self.reloads)?;
        if let Some(v) = self.transform.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_repeated_packed_uint32(8, &self.turret_angles)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Contact {
        Contact::new()
    }

    fn clear(&mut self) {
        self.damage = 0;
        self.entity_id = 0;
        self.entity_type = ::std::option::Option::None;
        self.guidance.clear();
        self.player_id = ::std::option::Option::None;
        self.reloads.clear();
        self.transform.clear();
        self.turret_angles.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Contact {
        static instance: Contact = Contact {
            damage: 0,
            entity_id: 0,
            entity_type: ::std::option::Option::None,
            guidance: ::protobuf::MessageField::none(),
            player_id: ::std::option::Option::None,
            reloads: ::std::vec::Vec::new(),
            transform: ::protobuf::MessageField::none(),
            turret_angles: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Contact {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Contact").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Contact {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Contact {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.mk48.ChunkId)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChunkId {
    // message fields
    // @@protoc_insertion_point(field:prost.mk48.ChunkId.x)
    pub x: i32,
    // @@protoc_insertion_point(field:prost.mk48.ChunkId.y)
    pub y: i32,
    // special fields
    // @@protoc_insertion_point(special_field:prost.mk48.ChunkId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChunkId {
    fn default() -> &'a ChunkId {
        <ChunkId as ::protobuf::Message>::default_instance()
    }
}

impl ChunkId {
    pub fn new() -> ChunkId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &ChunkId| { &m.x },
            |m: &mut ChunkId| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &ChunkId| { &m.y },
            |m: &mut ChunkId| { &mut m.y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkId>(
            "ChunkId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChunkId {
    const NAME: &'static str = "ChunkId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x = is.read_int32()?;
                },
                16 => {
                    self.y = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.x);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.y);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0 {
            os.write_int32(1, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(2, self.y)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChunkId {
        ChunkId::new()
    }

    fn clear(&mut self) {
        self.x = 0;
        self.y = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChunkId {
        static instance: ChunkId = ChunkId {
            x: 0,
            y: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChunkId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChunkId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChunkId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.mk48.TerrainUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TerrainUpdate {
    // message fields
    // @@protoc_insertion_point(field:prost.mk48.TerrainUpdate.chunk_id)
    pub chunk_id: ::protobuf::MessageField<ChunkId>,
    // @@protoc_insertion_point(field:prost.mk48.TerrainUpdate.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:prost.mk48.TerrainUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TerrainUpdate {
    fn default() -> &'a TerrainUpdate {
        <TerrainUpdate as ::protobuf::Message>::default_instance()
    }
}

impl TerrainUpdate {
    pub fn new() -> TerrainUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ChunkId>(
            "chunk_id",
            |m: &TerrainUpdate| { &m.chunk_id },
            |m: &mut TerrainUpdate| { &mut m.chunk_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &TerrainUpdate| { &m.data },
            |m: &mut TerrainUpdate| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TerrainUpdate>(
            "TerrainUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TerrainUpdate {
    const NAME: &'static str = "TerrainUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.chunk_id)?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.chunk_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.chunk_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TerrainUpdate {
        TerrainUpdate::new()
    }

    fn clear(&mut self) {
        self.chunk_id.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TerrainUpdate {
        static instance: TerrainUpdate = TerrainUpdate {
            chunk_id: ::protobuf::MessageField::none(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TerrainUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TerrainUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TerrainUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TerrainUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.mk48.Update)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Update {
    // message fields
    // @@protoc_insertion_point(field:prost.mk48.Update.contacts)
    pub contacts: ::std::vec::Vec<Contact>,
    // @@protoc_insertion_point(field:prost.mk48.Update.score)
    pub score: u32,
    // @@protoc_insertion_point(field:prost.mk48.Update.world_radius)
    pub world_radius: f32,
    // @@protoc_insertion_point(field:prost.mk48.Update.terrain_updates)
    pub terrain_updates: ::std::vec::Vec<TerrainUpdate>,
    // special fields
    // @@protoc_insertion_point(special_field:prost.mk48.Update.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Update {
    fn default() -> &'a Update {
        <Update as ::protobuf::Message>::default_instance()
    }
}

impl Update {
    pub fn new() -> Update {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "contacts",
            |m: &Update| { &m.contacts },
            |m: &mut Update| { &mut m.contacts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score",
            |m: &Update| { &m.score },
            |m: &mut Update| { &mut m.score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "world_radius",
            |m: &Update| { &m.world_radius },
            |m: &mut Update| { &mut m.world_radius },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "terrain_updates",
            |m: &Update| { &m.terrain_updates },
            |m: &mut Update| { &mut m.terrain_updates },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Update>(
            "Update",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Update {
    const NAME: &'static str = "Update";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.contacts.push(is.read_message()?);
                },
                16 => {
                    self.score = is.read_uint32()?;
                },
                29 => {
                    self.world_radius = is.read_float()?;
                },
                34 => {
                    self.terrain_updates.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.contacts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.score != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.score);
        }
        if self.world_radius != 0. {
            my_size += 1 + 4;
        }
        for value in &self.terrain_updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.contacts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.score != 0 {
            os.write_uint32(2, self.score)?;
        }
        if self.world_radius != 0. {
            os.write_float(3, self.world_radius)?;
        }
        for v in &self.terrain_updates {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Update {
        Update::new()
    }

    fn clear(&mut self) {
        self.contacts.clear();
        self.score = 0;
        self.world_radius = 0.;
        self.terrain_updates.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Update {
        static instance: Update = Update {
            contacts: ::std::vec::Vec::new(),
            score: 0,
            world_radius: 0.,
            terrain_updates: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Update {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Update").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Update {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Update {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.mk48.Updates)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Updates {
    // message fields
    // @@protoc_insertion_point(field:prost.mk48.Updates.updates)
    pub updates: ::std::vec::Vec<Update>,
    // special fields
    // @@protoc_insertion_point(special_field:prost.mk48.Updates.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Updates {
    fn default() -> &'a Updates {
        <Updates as ::protobuf::Message>::default_instance()
    }
}

impl Updates {
    pub fn new() -> Updates {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "updates",
            |m: &Updates| { &m.updates },
            |m: &mut Updates| { &mut m.updates },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Updates>(
            "Updates",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Updates {
    const NAME: &'static str = "Updates";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.updates.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.updates {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Updates {
        Updates::new()
    }

    fn clear(&mut self) {
        self.updates.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Updates {
        static instance: Updates = Updates {
            updates: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Updates {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Updates").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Updates {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Updates {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:prost.mk48.EntityType)
pub enum EntityType {
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.ARLEIGH_BURKE)
    ARLEIGH_BURKE = 0,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.BISMARCK)
    BISMARCK = 1,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.CLEMENCEAU)
    CLEMENCEAU = 2,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.FLETCHER)
    FLETCHER = 3,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.G5)
    G5 = 4,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.IOWA)
    IOWA = 5,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.KOLKATA)
    KOLKATA = 6,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.OSA)
    OSA = 7,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.YASEN)
    YASEN = 8,
    // @@protoc_insertion_point(enum_value:prost.mk48.EntityType.ZUBR)
    ZUBR = 9,
}

impl ::protobuf::Enum for EntityType {
    const NAME: &'static str = "EntityType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EntityType> {
        match value {
            0 => ::std::option::Option::Some(EntityType::ARLEIGH_BURKE),
            1 => ::std::option::Option::Some(EntityType::BISMARCK),
            2 => ::std::option::Option::Some(EntityType::CLEMENCEAU),
            3 => ::std::option::Option::Some(EntityType::FLETCHER),
            4 => ::std::option::Option::Some(EntityType::G5),
            5 => ::std::option::Option::Some(EntityType::IOWA),
            6 => ::std::option::Option::Some(EntityType::KOLKATA),
            7 => ::std::option::Option::Some(EntityType::OSA),
            8 => ::std::option::Option::Some(EntityType::YASEN),
            9 => ::std::option::Option::Some(EntityType::ZUBR),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EntityType> {
        match str {
            "ARLEIGH_BURKE" => ::std::option::Option::Some(EntityType::ARLEIGH_BURKE),
            "BISMARCK" => ::std::option::Option::Some(EntityType::BISMARCK),
            "CLEMENCEAU" => ::std::option::Option::Some(EntityType::CLEMENCEAU),
            "FLETCHER" => ::std::option::Option::Some(EntityType::FLETCHER),
            "G5" => ::std::option::Option::Some(EntityType::G5),
            "IOWA" => ::std::option::Option::Some(EntityType::IOWA),
            "KOLKATA" => ::std::option::Option::Some(EntityType::KOLKATA),
            "OSA" => ::std::option::Option::Some(EntityType::OSA),
            "YASEN" => ::std::option::Option::Some(EntityType::YASEN),
            "ZUBR" => ::std::option::Option::Some(EntityType::ZUBR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EntityType] = &[
        EntityType::ARLEIGH_BURKE,
        EntityType::BISMARCK,
        EntityType::CLEMENCEAU,
        EntityType::FLETCHER,
        EntityType::G5,
        EntityType::IOWA,
        EntityType::KOLKATA,
        EntityType::OSA,
        EntityType::YASEN,
        EntityType::ZUBR,
    ];
}

impl ::protobuf::EnumFull for EntityType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EntityType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EntityType {
    fn default() -> Self {
        EntityType::ARLEIGH_BURKE
    }
}

impl EntityType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EntityType>("EntityType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nmk48.proto\x12\nprost.mk48\"&\n\x08Vector2f\x12\x0c\n\x01x\x18\x01\
    \x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x02R\x01y\"\x8b\x01\
    \n\tTransform\x12\x1a\n\x08altitude\x18\x01\x20\x01(\x05R\x08altitude\
    \x12\x14\n\x05angle\x18\x02\x20\x01(\rR\x05angle\x120\n\x08position\x18\
    \x03\x20\x01(\x0b2\x14.prost.mk48.Vector2fR\x08position\x12\x1a\n\x08vel\
    ocity\x18\x04\x20\x01(\x05R\x08velocity\"X\n\x08Guidance\x12\x14\n\x05an\
    gle\x18\x01\x20\x01(\rR\x05angle\x12\x1a\n\x08submerge\x18\x02\x20\x01(\
    \x08R\x08submerge\x12\x1a\n\x08velocity\x18\x03\x20\x01(\x05R\x08velocit\
    y\"\xe2\x02\n\x07Contact\x12\x16\n\x06damage\x18\x01\x20\x01(\rR\x06dama\
    ge\x12\x1b\n\tentity_id\x18\x02\x20\x01(\rR\x08entityId\x12<\n\x0bentity\
    _type\x18\x03\x20\x01(\x0e2\x16.prost.mk48.EntityTypeH\0R\nentityType\
    \x88\x01\x01\x120\n\x08guidance\x18\x04\x20\x01(\x0b2\x14.prost.mk48.Gui\
    danceR\x08guidance\x12\x20\n\tplayer_id\x18\x05\x20\x01(\rH\x01R\x08play\
    erId\x88\x01\x01\x12\x18\n\x07reloads\x18\x06\x20\x03(\x08R\x07reloads\
    \x123\n\ttransform\x18\x07\x20\x01(\x0b2\x15.prost.mk48.TransformR\ttran\
    sform\x12#\n\rturret_angles\x18\x08\x20\x03(\rR\x0cturretAnglesB\x0e\n\
    \x0c_entity_typeB\x0c\n\n_player_id\"%\n\x07ChunkId\x12\x0c\n\x01x\x18\
    \x01\x20\x01(\x05R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x05R\x01y\"S\n\r\
    TerrainUpdate\x12.\n\x08chunk_id\x18\x01\x20\x01(\x0b2\x13.prost.mk48.Ch\
    unkIdR\x07chunkId\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\"\xb6\
    \x01\n\x06Update\x12/\n\x08contacts\x18\x01\x20\x03(\x0b2\x13.prost.mk48\
    .ContactR\x08contacts\x12\x14\n\x05score\x18\x02\x20\x01(\rR\x05score\
    \x12!\n\x0cworld_radius\x18\x03\x20\x01(\x02R\x0bworldRadius\x12B\n\x0ft\
    errain_updates\x18\x04\x20\x03(\x0b2\x19.prost.mk48.TerrainUpdateR\x0ete\
    rrainUpdates\"7\n\x07Updates\x12,\n\x07updates\x18\x01\x20\x03(\x0b2\x12\
    .prost.mk48.UpdateR\x07updates*\x88\x01\n\nEntityType\x12\x11\n\rARLEIGH\
    _BURKE\x10\0\x12\x0c\n\x08BISMARCK\x10\x01\x12\x0e\n\nCLEMENCEAU\x10\x02\
    \x12\x0c\n\x08FLETCHER\x10\x03\x12\x06\n\x02G5\x10\x04\x12\x08\n\x04IOWA\
    \x10\x05\x12\x0b\n\x07KOLKATA\x10\x06\x12\x07\n\x03OSA\x10\x07\x12\t\n\
    \x05YASEN\x10\x08\x12\x08\n\x04ZUBR\x10\tb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(Vector2f::generated_message_descriptor_data());
            messages.push(Transform::generated_message_descriptor_data());
            messages.push(Guidance::generated_message_descriptor_data());
            messages.push(Contact::generated_message_descriptor_data());
            messages.push(ChunkId::generated_message_descriptor_data());
            messages.push(TerrainUpdate::generated_message_descriptor_data());
            messages.push(Update::generated_message_descriptor_data());
            messages.push(Updates::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EntityType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
