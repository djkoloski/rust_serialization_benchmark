// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: src/datasets/minecraft_savedata/minecraft_savedata.capnp


#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum GameType {
  Survival = 0,
  Creative = 1,
  Adventure = 2,
  Spectator = 3,
}
impl ::core::convert::TryFrom<u16> for GameType {
  type Error = ::capnp::NotInSchema;
  fn try_from(value: u16) -> ::core::result::Result<Self, <GameType as ::core::convert::TryFrom<u16>>::Error> {
    match value {
      0 => ::core::result::Result::Ok(Self::Survival),
      1 => ::core::result::Result::Ok(Self::Creative),
      2 => ::core::result::Result::Ok(Self::Adventure),
      3 => ::core::result::Result::Ok(Self::Spectator),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl From<GameType> for u16 {
  #[inline]
  fn from(x: GameType) -> u16 { x as u16 }
}
impl ::capnp::traits::HasTypeId for GameType {
  const TYPE_ID: u64 = 0xf19f_805a_78b6_a34bu64;
}

pub mod item {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_count(self) -> i8 {
      self.reader.get_data_field::<i8>(0)
    }
    #[inline]
    pub fn get_slot(self) -> u8 {
      self.reader.get_data_field::<u8>(1)
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_count(self) -> i8 {
      self.builder.get_data_field::<i8>(0)
    }
    #[inline]
    pub fn set_count(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(0, value);
    }
    #[inline]
    pub fn get_slot(self) -> u8 {
      self.builder.get_data_field::<u8>(1)
    }
    #[inline]
    pub fn set_slot(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(1, value);
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_id(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_id(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub const TYPE_ID: u64 = 0xe80c_a65e_fefd_a456;
  }
}

pub mod abilities {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_walk_speed(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn get_fly_speed(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_may_fly(self) -> bool {
      self.reader.get_bool_field(64)
    }
    #[inline]
    pub fn get_flying(self) -> bool {
      self.reader.get_bool_field(65)
    }
    #[inline]
    pub fn get_invulnerable(self) -> bool {
      self.reader.get_bool_field(66)
    }
    #[inline]
    pub fn get_may_build(self) -> bool {
      self.reader.get_bool_field(67)
    }
    #[inline]
    pub fn get_instabuild(self) -> bool {
      self.reader.get_bool_field(68)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_walk_speed(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_walk_speed(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
    #[inline]
    pub fn get_fly_speed(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_fly_speed(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_may_fly(self) -> bool {
      self.builder.get_bool_field(64)
    }
    #[inline]
    pub fn set_may_fly(&mut self, value: bool)  {
      self.builder.set_bool_field(64, value);
    }
    #[inline]
    pub fn get_flying(self) -> bool {
      self.builder.get_bool_field(65)
    }
    #[inline]
    pub fn set_flying(&mut self, value: bool)  {
      self.builder.set_bool_field(65, value);
    }
    #[inline]
    pub fn get_invulnerable(self) -> bool {
      self.builder.get_bool_field(66)
    }
    #[inline]
    pub fn set_invulnerable(&mut self, value: bool)  {
      self.builder.set_bool_field(66, value);
    }
    #[inline]
    pub fn get_may_build(self) -> bool {
      self.builder.get_bool_field(67)
    }
    #[inline]
    pub fn set_may_build(&mut self, value: bool)  {
      self.builder.set_bool_field(67, value);
    }
    #[inline]
    pub fn get_instabuild(self) -> bool {
      self.builder.get_bool_field(68)
    }
    #[inline]
    pub fn set_instabuild(&mut self, value: bool)  {
      self.builder.set_bool_field(68, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub const TYPE_ID: u64 = 0xeb01_bb9a_c273_82d1;
  }
}

pub mod entity {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_pos(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::pos::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_motion(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::motion::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_rotation(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::rotation::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_fall_distance(self) -> f32 {
      self.reader.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn get_fire(self) -> u16 {
      self.reader.get_data_field::<u16>(30)
    }
    #[inline]
    pub fn get_air(self) -> u16 {
      self.reader.get_data_field::<u16>(31)
    }
    #[inline]
    pub fn get_on_ground(self) -> bool {
      self.reader.get_bool_field(512)
    }
    #[inline]
    pub fn get_no_gravity(self) -> bool {
      self.reader.get_bool_field(513)
    }
    #[inline]
    pub fn get_invulnerable(self) -> bool {
      self.reader.get_bool_field(514)
    }
    #[inline]
    pub fn get_portal_cooldown(self) -> i32 {
      self.reader.get_data_field::<i32>(17)
    }
    #[inline]
    pub fn get_uuid(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::uuid::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_custom_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_custom_name(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_custom_name_visible(self) -> bool {
      self.reader.get_bool_field(515)
    }
    #[inline]
    pub fn get_silent(self) -> bool {
      self.reader.get_bool_field(516)
    }
    #[inline]
    pub fn get_glowing(self) -> bool {
      self.reader.get_bool_field(517)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 11, pointers: 2 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_id(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_id(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_pos(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::pos::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_pos(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::pos::Builder<'a> {
      self.builder.set_data_field::<f64>(0, 0f64);
      self.builder.set_data_field::<f64>(1, 0f64);
      self.builder.set_data_field::<f64>(2, 0f64);
      self.builder.into()
    }
    #[inline]
    pub fn get_motion(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::motion::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_motion(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::motion::Builder<'a> {
      self.builder.set_data_field::<f64>(3, 0f64);
      self.builder.set_data_field::<f64>(4, 0f64);
      self.builder.set_data_field::<f64>(5, 0f64);
      self.builder.into()
    }
    #[inline]
    pub fn get_rotation(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::rotation::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_rotation(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::rotation::Builder<'a> {
      self.builder.set_data_field::<f32>(12, 0f32);
      self.builder.set_data_field::<f32>(13, 0f32);
      self.builder.into()
    }
    #[inline]
    pub fn get_fall_distance(self) -> f32 {
      self.builder.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn set_fall_distance(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(14, value);
    }
    #[inline]
    pub fn get_fire(self) -> u16 {
      self.builder.get_data_field::<u16>(30)
    }
    #[inline]
    pub fn set_fire(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(30, value);
    }
    #[inline]
    pub fn get_air(self) -> u16 {
      self.builder.get_data_field::<u16>(31)
    }
    #[inline]
    pub fn set_air(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(31, value);
    }
    #[inline]
    pub fn get_on_ground(self) -> bool {
      self.builder.get_bool_field(512)
    }
    #[inline]
    pub fn set_on_ground(&mut self, value: bool)  {
      self.builder.set_bool_field(512, value);
    }
    #[inline]
    pub fn get_no_gravity(self) -> bool {
      self.builder.get_bool_field(513)
    }
    #[inline]
    pub fn set_no_gravity(&mut self, value: bool)  {
      self.builder.set_bool_field(513, value);
    }
    #[inline]
    pub fn get_invulnerable(self) -> bool {
      self.builder.get_bool_field(514)
    }
    #[inline]
    pub fn set_invulnerable(&mut self, value: bool)  {
      self.builder.set_bool_field(514, value);
    }
    #[inline]
    pub fn get_portal_cooldown(self) -> i32 {
      self.builder.get_data_field::<i32>(17)
    }
    #[inline]
    pub fn set_portal_cooldown(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(17, value);
    }
    #[inline]
    pub fn get_uuid(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::uuid::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_uuid(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::uuid::Builder<'a> {
      self.builder.set_data_field::<u32>(18, 0u32);
      self.builder.set_data_field::<u32>(19, 0u32);
      self.builder.set_data_field::<u32>(20, 0u32);
      self.builder.set_data_field::<u32>(21, 0u32);
      self.builder.into()
    }
    #[inline]
    pub fn get_custom_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_custom_name(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_custom_name(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    #[inline]
    pub fn has_custom_name(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_custom_name_visible(self) -> bool {
      self.builder.get_bool_field(515)
    }
    #[inline]
    pub fn set_custom_name_visible(&mut self, value: bool)  {
      self.builder.set_bool_field(515, value);
    }
    #[inline]
    pub fn get_silent(self) -> bool {
      self.builder.get_bool_field(516)
    }
    #[inline]
    pub fn set_silent(&mut self, value: bool)  {
      self.builder.set_bool_field(516, value);
    }
    #[inline]
    pub fn get_glowing(self) -> bool {
      self.builder.get_bool_field(517)
    }
    #[inline]
    pub fn set_glowing(&mut self, value: bool)  {
      self.builder.set_bool_field(517, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_pos(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::pos::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_motion(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::motion::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_rotation(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::rotation::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_uuid(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::uuid::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
  }
  mod _private {
    pub const TYPE_ID: u64 = 0xa4c4_298d_a569_4821;
  }

  pub mod pos {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x(self) -> f64 {
        self.reader.get_data_field::<f64>(0)
      }
      #[inline]
      pub fn get_y(self) -> f64 {
        self.reader.get_data_field::<f64>(1)
      }
      #[inline]
      pub fn get_z(self) -> f64 {
        self.reader.get_data_field::<f64>(2)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 11, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x(self) -> f64 {
        self.builder.get_data_field::<f64>(0)
      }
      #[inline]
      pub fn set_x(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(0, value);
      }
      #[inline]
      pub fn get_y(self) -> f64 {
        self.builder.get_data_field::<f64>(1)
      }
      #[inline]
      pub fn set_y(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(1, value);
      }
      #[inline]
      pub fn get_z(self) -> f64 {
        self.builder.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn set_z(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(2, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xdef3_1493_9643_0df6;
    }
  }

  pub mod motion {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x(self) -> f64 {
        self.reader.get_data_field::<f64>(3)
      }
      #[inline]
      pub fn get_y(self) -> f64 {
        self.reader.get_data_field::<f64>(4)
      }
      #[inline]
      pub fn get_z(self) -> f64 {
        self.reader.get_data_field::<f64>(5)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 11, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x(self) -> f64 {
        self.builder.get_data_field::<f64>(3)
      }
      #[inline]
      pub fn set_x(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(3, value);
      }
      #[inline]
      pub fn get_y(self) -> f64 {
        self.builder.get_data_field::<f64>(4)
      }
      #[inline]
      pub fn set_y(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(4, value);
      }
      #[inline]
      pub fn get_z(self) -> f64 {
        self.builder.get_data_field::<f64>(5)
      }
      #[inline]
      pub fn set_z(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(5, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xf03a_4aba_cc0e_9775;
    }
  }

  pub mod rotation {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x(self) -> f32 {
        self.reader.get_data_field::<f32>(12)
      }
      #[inline]
      pub fn get_y(self) -> f32 {
        self.reader.get_data_field::<f32>(13)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 11, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x(self) -> f32 {
        self.builder.get_data_field::<f32>(12)
      }
      #[inline]
      pub fn set_x(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(12, value);
      }
      #[inline]
      pub fn get_y(self) -> f32 {
        self.builder.get_data_field::<f32>(13)
      }
      #[inline]
      pub fn set_y(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(13, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xa1f6_5b5d_e1f5_56a5;
    }
  }

  pub mod uuid {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x0(self) -> u32 {
        self.reader.get_data_field::<u32>(18)
      }
      #[inline]
      pub fn get_x1(self) -> u32 {
        self.reader.get_data_field::<u32>(19)
      }
      #[inline]
      pub fn get_x2(self) -> u32 {
        self.reader.get_data_field::<u32>(20)
      }
      #[inline]
      pub fn get_x3(self) -> u32 {
        self.reader.get_data_field::<u32>(21)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 11, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x0(self) -> u32 {
        self.builder.get_data_field::<u32>(18)
      }
      #[inline]
      pub fn set_x0(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(18, value);
      }
      #[inline]
      pub fn get_x1(self) -> u32 {
        self.builder.get_data_field::<u32>(19)
      }
      #[inline]
      pub fn set_x1(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(19, value);
      }
      #[inline]
      pub fn get_x2(self) -> u32 {
        self.builder.get_data_field::<u32>(20)
      }
      #[inline]
      pub fn set_x2(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(20, value);
      }
      #[inline]
      pub fn get_x3(self) -> u32 {
        self.builder.get_data_field::<u32>(21)
      }
      #[inline]
      pub fn set_x3(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(21, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0x8202_c2ce_fb09_919d;
    }
  }
}

pub mod recipe_book {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_recipes(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_recipes(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_to_be_displayed(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_to_be_displayed(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_is_filtering_craftable(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_is_gui_open(self) -> bool {
      self.reader.get_bool_field(1)
    }
    #[inline]
    pub fn get_is_furnace_filtering_craftable(self) -> bool {
      self.reader.get_bool_field(2)
    }
    #[inline]
    pub fn get_is_furnace_gui_open(self) -> bool {
      self.reader.get_bool_field(3)
    }
    #[inline]
    pub fn get_is_blasting_furnace_filtering_craftable(self) -> bool {
      self.reader.get_bool_field(4)
    }
    #[inline]
    pub fn get_is_blasting_furnace_gui_open(self) -> bool {
      self.reader.get_bool_field(5)
    }
    #[inline]
    pub fn get_is_smoker_filtering_craftable(self) -> bool {
      self.reader.get_bool_field(6)
    }
    #[inline]
    pub fn get_is_smoker_gui_open(self) -> bool {
      self.reader.get_bool_field(7)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 2 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_recipes(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_recipes(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_recipes(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_recipes(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_to_be_displayed(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_to_be_displayed(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_to_be_displayed(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_to_be_displayed(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_is_filtering_craftable(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_is_filtering_craftable(&mut self, value: bool)  {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_is_gui_open(self) -> bool {
      self.builder.get_bool_field(1)
    }
    #[inline]
    pub fn set_is_gui_open(&mut self, value: bool)  {
      self.builder.set_bool_field(1, value);
    }
    #[inline]
    pub fn get_is_furnace_filtering_craftable(self) -> bool {
      self.builder.get_bool_field(2)
    }
    #[inline]
    pub fn set_is_furnace_filtering_craftable(&mut self, value: bool)  {
      self.builder.set_bool_field(2, value);
    }
    #[inline]
    pub fn get_is_furnace_gui_open(self) -> bool {
      self.builder.get_bool_field(3)
    }
    #[inline]
    pub fn set_is_furnace_gui_open(&mut self, value: bool)  {
      self.builder.set_bool_field(3, value);
    }
    #[inline]
    pub fn get_is_blasting_furnace_filtering_craftable(self) -> bool {
      self.builder.get_bool_field(4)
    }
    #[inline]
    pub fn set_is_blasting_furnace_filtering_craftable(&mut self, value: bool)  {
      self.builder.set_bool_field(4, value);
    }
    #[inline]
    pub fn get_is_blasting_furnace_gui_open(self) -> bool {
      self.builder.get_bool_field(5)
    }
    #[inline]
    pub fn set_is_blasting_furnace_gui_open(&mut self, value: bool)  {
      self.builder.set_bool_field(5, value);
    }
    #[inline]
    pub fn get_is_smoker_filtering_craftable(self) -> bool {
      self.builder.get_bool_field(6)
    }
    #[inline]
    pub fn set_is_smoker_filtering_craftable(&mut self, value: bool)  {
      self.builder.set_bool_field(6, value);
    }
    #[inline]
    pub fn get_is_smoker_gui_open(self) -> bool {
      self.builder.get_bool_field(7)
    }
    #[inline]
    pub fn set_is_smoker_gui_open(&mut self, value: bool)  {
      self.builder.set_bool_field(7, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub const TYPE_ID: u64 = 0xc784_ef71_75eb_6eb4;
  }
}

pub mod player {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_game_type(self) -> ::core::result::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::GameType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_previous_game_type(self) -> ::core::result::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::GameType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn get_score(self) -> i64 {
      self.reader.get_data_field::<i64>(1)
    }
    #[inline]
    pub fn get_dimension(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_dimension(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_selected_item_slot(self) -> u32 {
      self.reader.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn get_selected_item(self) -> ::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_selected_item(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_spawn_dimension(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn_dimension::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_spawn(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_spawn_forced(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn_forced::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_sleep_timer(self) -> u16 {
      self.reader.get_data_field::<u16>(11)
    }
    #[inline]
    pub fn get_food_exhaustion_level(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_food_saturation_level(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_food_tick_timer(self) -> u32 {
      self.reader.get_data_field::<u32>(14)
    }
    #[inline]
    pub fn get_xp_level(self) -> u32 {
      self.reader.get_data_field::<u32>(15)
    }
    #[inline]
    pub fn get_xp_p(self) -> f32 {
      self.reader.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn get_xp_total(self) -> i32 {
      self.reader.get_data_field::<i32>(17)
    }
    #[inline]
    pub fn get_xp_seed(self) -> i32 {
      self.reader.get_data_field::<i32>(18)
    }
    #[inline]
    pub fn get_inventory(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_inventory(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_ender_items(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_ender_items(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_abilities(self) -> ::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::abilities::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_abilities(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_entered_nether_position(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::entered_nether_position::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_root_vehicle(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_shoulder_entity_left(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::shoulder_entity_left::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_shoulder_entity_right(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::shoulder_entity_right::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_seen_credits(self) -> bool {
      self.reader.get_bool_field(161)
    }
    #[inline]
    pub fn get_recipe_book(self) -> ::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::recipe_book::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_recipe_book(&self) -> bool {
      !self.reader.get_pointer_field(9).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_game_type(self) -> ::core::result::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::GameType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_game_type(&mut self, value: crate::datasets::minecraft_savedata::minecraft_savedata_capnp::GameType)  {
      self.builder.set_data_field::<u16>(0, value as u16)
    }
    #[inline]
    pub fn get_previous_game_type(self) -> ::core::result::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::GameType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn set_previous_game_type(&mut self, value: crate::datasets::minecraft_savedata::minecraft_savedata_capnp::GameType)  {
      self.builder.set_data_field::<u16>(1, value as u16)
    }
    #[inline]
    pub fn get_score(self) -> i64 {
      self.builder.get_data_field::<i64>(1)
    }
    #[inline]
    pub fn set_score(&mut self, value: i64)  {
      self.builder.set_data_field::<i64>(1, value);
    }
    #[inline]
    pub fn get_dimension(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_dimension(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_dimension(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_dimension(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_selected_item_slot(self) -> u32 {
      self.builder.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn set_selected_item_slot(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn get_selected_item(self) -> ::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_selected_item(&mut self, value: crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_selected_item(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_selected_item(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_spawn_dimension(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn_dimension::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_spawn_dimension(mut self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn_dimension::Builder<'a> {
      self.builder.set_data_field::<u16>(8, 0);
      self.builder.reborrow().get_pointer_field(2).clear();
      self.builder.into()
    }
    #[inline]
    pub fn get_spawn(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_spawn(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn::Builder<'a> {
      self.builder.set_data_field::<i64>(3, 0i64);
      self.builder.set_data_field::<i64>(4, 0i64);
      self.builder.set_data_field::<i64>(5, 0i64);
      self.builder.into()
    }
    #[inline]
    pub fn get_spawn_forced(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn_forced::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_spawn_forced(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn_forced::Builder<'a> {
      self.builder.set_data_field::<u16>(9, 0);
      self.builder.set_bool_field(160, false);
      self.builder.into()
    }
    #[inline]
    pub fn get_sleep_timer(self) -> u16 {
      self.builder.get_data_field::<u16>(11)
    }
    #[inline]
    pub fn set_sleep_timer(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(11, value);
    }
    #[inline]
    pub fn get_food_exhaustion_level(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_food_exhaustion_level(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_food_saturation_level(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_food_saturation_level(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_food_tick_timer(self) -> u32 {
      self.builder.get_data_field::<u32>(14)
    }
    #[inline]
    pub fn set_food_tick_timer(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(14, value);
    }
    #[inline]
    pub fn get_xp_level(self) -> u32 {
      self.builder.get_data_field::<u32>(15)
    }
    #[inline]
    pub fn set_xp_level(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(15, value);
    }
    #[inline]
    pub fn get_xp_p(self) -> f32 {
      self.builder.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn set_xp_p(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(16, value);
    }
    #[inline]
    pub fn get_xp_total(self) -> i32 {
      self.builder.get_data_field::<i32>(17)
    }
    #[inline]
    pub fn set_xp_total(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(17, value);
    }
    #[inline]
    pub fn get_xp_seed(self) -> i32 {
      self.builder.get_data_field::<i32>(18)
    }
    #[inline]
    pub fn set_xp_seed(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(18, value);
    }
    #[inline]
    pub fn get_inventory(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_inventory(&mut self, value: ::capnp::struct_list::Reader<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_inventory(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_inventory(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_ender_items(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_ender_items(&mut self, value: ::capnp::struct_list::Reader<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_ender_items(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_ender_items(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_abilities(self) -> ::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::abilities::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_abilities(&mut self, value: crate::datasets::minecraft_savedata::minecraft_savedata_capnp::abilities::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_abilities(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::abilities::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
    }
    #[inline]
    pub fn has_abilities(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_entered_nether_position(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::entered_nether_position::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_entered_nether_position(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::entered_nether_position::Builder<'a> {
      self.builder.set_data_field::<u16>(38, 0);
      self.builder.set_data_field::<f64>(10, 0f64);
      self.builder.set_data_field::<f64>(11, 0f64);
      self.builder.set_data_field::<f64>(12, 0f64);
      self.builder.into()
    }
    #[inline]
    pub fn get_root_vehicle(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_root_vehicle(mut self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::Builder<'a> {
      self.builder.set_data_field::<u16>(39, 0);
      self.builder.set_data_field::<u32>(26, 0u32);
      self.builder.set_data_field::<u32>(27, 0u32);
      self.builder.set_data_field::<u32>(28, 0u32);
      self.builder.set_data_field::<u32>(29, 0u32);
      self.builder.reborrow().get_pointer_field(6).clear();
      self.builder.into()
    }
    #[inline]
    pub fn get_shoulder_entity_left(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::shoulder_entity_left::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_shoulder_entity_left(mut self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::shoulder_entity_left::Builder<'a> {
      self.builder.set_data_field::<u16>(60, 0);
      self.builder.reborrow().get_pointer_field(7).clear();
      self.builder.into()
    }
    #[inline]
    pub fn get_shoulder_entity_right(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::shoulder_entity_right::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_shoulder_entity_right(mut self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::shoulder_entity_right::Builder<'a> {
      self.builder.set_data_field::<u16>(61, 0);
      self.builder.reborrow().get_pointer_field(8).clear();
      self.builder.into()
    }
    #[inline]
    pub fn get_seen_credits(self) -> bool {
      self.builder.get_bool_field(161)
    }
    #[inline]
    pub fn set_seen_credits(&mut self, value: bool)  {
      self.builder.set_bool_field(161, value);
    }
    #[inline]
    pub fn get_recipe_book(self) -> ::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::recipe_book::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_recipe_book(&mut self, value: crate::datasets::minecraft_savedata::minecraft_savedata_capnp::recipe_book::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false)
    }
    #[inline]
    pub fn init_recipe_book(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::recipe_book::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), 0)
    }
    #[inline]
    pub fn has_recipe_book(&self) -> bool {
      !self.builder.is_pointer_field_null(9)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_selected_item(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::item::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_spawn_dimension(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn_dimension::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_spawn(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_spawn_forced(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::spawn_forced::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_abilities(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::abilities::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(5))
    }
    pub fn get_entered_nether_position(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::entered_nether_position::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_root_vehicle(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_shoulder_entity_left(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::shoulder_entity_left::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_shoulder_entity_right(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::shoulder_entity_right::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_recipe_book(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::recipe_book::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(9))
    }
  }
  mod _private {
    pub const TYPE_ID: u64 = 0xae91_5b4d_6e13_f034;
  }

  pub mod spawn_dimension {
    pub use self::Which::{None,Some};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn has_some(&self) -> bool {
        if self.reader.get_data_field::<u16>(8) != 1 { return false; }
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(8) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_none(&mut self, _value: ())  {
        self.builder.set_data_field::<u16>(8, 0);
      }
      #[inline]
      pub fn set_some(&mut self, value: ::capnp::text::Reader<'_>)  {
        self.builder.set_data_field::<u16>(8, 1);
        self.builder.reborrow().get_pointer_field(2).set_text(value);
      }
      #[inline]
      pub fn init_some(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.set_data_field::<u16>(8, 1);
        self.builder.get_pointer_field(2).init_text(size)
      }
      #[inline]
      pub fn has_some(&self) -> bool {
        if self.builder.get_data_field::<u16>(8) != 1 { return false; }
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(8) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xab4e_4173_a401_c9aa;
    }
    pub enum Which<A0> {
      None(()),
      Some(A0),
    }
    pub type WhichReader<'a,> = Which<::capnp::Result<::capnp::text::Reader<'a>>>;
    pub type WhichBuilder<'a,> = Which<::capnp::Result<::capnp::text::Builder<'a>>>;
  }

  pub mod spawn {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x(self) -> i64 {
        self.reader.get_data_field::<i64>(3)
      }
      #[inline]
      pub fn get_y(self) -> i64 {
        self.reader.get_data_field::<i64>(4)
      }
      #[inline]
      pub fn get_z(self) -> i64 {
        self.reader.get_data_field::<i64>(5)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x(self) -> i64 {
        self.builder.get_data_field::<i64>(3)
      }
      #[inline]
      pub fn set_x(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(3, value);
      }
      #[inline]
      pub fn get_y(self) -> i64 {
        self.builder.get_data_field::<i64>(4)
      }
      #[inline]
      pub fn set_y(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(4, value);
      }
      #[inline]
      pub fn get_z(self) -> i64 {
        self.builder.get_data_field::<i64>(5)
      }
      #[inline]
      pub fn set_z(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(5, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xb9d8_f3d9_6715_bb8e;
    }
  }

  pub mod spawn_forced {
    pub use self::Which::{None,Some};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(9) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              self.reader.get_bool_field(160)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_none(&mut self, _value: ())  {
        self.builder.set_data_field::<u16>(9, 0);
      }
      #[inline]
      pub fn set_some(&mut self, value: bool)  {
        self.builder.set_data_field::<u16>(9, 1);
        self.builder.set_bool_field(160, value);
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(9) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              self.builder.get_bool_field(160)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xca08_8848_7d66_f2df;
    }
    pub enum Which {
      None(()),
      Some(bool),
    }
    pub type WhichReader = Which;
    pub type WhichBuilder = Which;
  }

  pub mod entered_nether_position {
    pub use self::Which::{None,Some};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(38) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              self.reader.into()
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_none(&mut self, _value: ())  {
        self.builder.set_data_field::<u16>(38, 0);
      }
      #[inline]
      pub fn init_some(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::entered_nether_position::some::Builder<'a> {
        self.builder.set_data_field::<u16>(38, 1);
        self.builder.set_data_field::<f64>(10, 0f64);
        self.builder.set_data_field::<f64>(11, 0f64);
        self.builder.set_data_field::<f64>(12, 0f64);
        self.builder.into()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(38) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              self.builder.into()
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0x96c0_bbb4_3e82_1237;
    }
    pub enum Which<A0> {
      None(()),
      Some(A0),
    }
    pub type WhichReader<'a,> = Which<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::entered_nether_position::some::Reader<'a>>;
    pub type WhichBuilder<'a,> = Which<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::entered_nether_position::some::Builder<'a>>;

    pub mod some {
      #[derive(Copy, Clone)]
      pub struct Owned(());
      impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

      pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
      impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
      impl <'a,> ::core::clone::Clone for Reader<'a,>  {
        fn clone(&self) -> Self { *self }
      }

      impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
          Self { reader,  }
        }
      }

      impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
        fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
          self.reader
        }
      }

      impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
          self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
      }

      impl <'a,> Reader<'a,>  {
        pub fn reborrow(&self) -> Reader<'_,> {
          Self { .. *self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.reader.total_size()
        }
        #[inline]
        pub fn get_x(self) -> f64 {
          self.reader.get_data_field::<f64>(10)
        }
        #[inline]
        pub fn get_y(self) -> f64 {
          self.reader.get_data_field::<f64>(11)
        }
        #[inline]
        pub fn get_z(self) -> f64 {
          self.reader.get_data_field::<f64>(12)
        }
      }

      pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
      impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
      }
      impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
          Self { builder,  }
        }
      }

      impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
          self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
      }

      impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
          builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
        }
        fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
        fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
      }

      impl <'a,> Builder<'a,>  {
        pub fn into_reader(self) -> Reader<'a,> {
          self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_,> {
          Builder { builder: self.builder.reborrow() }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_,> {
          self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_x(self) -> f64 {
          self.builder.get_data_field::<f64>(10)
        }
        #[inline]
        pub fn set_x(&mut self, value: f64)  {
          self.builder.set_data_field::<f64>(10, value);
        }
        #[inline]
        pub fn get_y(self) -> f64 {
          self.builder.get_data_field::<f64>(11)
        }
        #[inline]
        pub fn set_y(&mut self, value: f64)  {
          self.builder.set_data_field::<f64>(11, value);
        }
        #[inline]
        pub fn get_z(self) -> f64 {
          self.builder.get_data_field::<f64>(12)
        }
        #[inline]
        pub fn set_z(&mut self, value: f64)  {
          self.builder.set_data_field::<f64>(12, value);
        }
      }

      pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
      impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
          Self { _typeless: typeless,  }
        }
      }
      impl Pipeline  {
      }
      mod _private {
        pub const TYPE_ID: u64 = 0xc6af_15d4_c5e6_38b7;
      }
    }
  }

  pub mod root_vehicle {
    pub use self::Which::{None,Some};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(39) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              self.reader.into()
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_none(&mut self, _value: ())  {
        self.builder.set_data_field::<u16>(39, 0);
      }
      #[inline]
      pub fn init_some(mut self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::some::Builder<'a> {
        self.builder.set_data_field::<u16>(39, 1);
        self.builder.set_data_field::<u32>(26, 0u32);
        self.builder.set_data_field::<u32>(27, 0u32);
        self.builder.set_data_field::<u32>(28, 0u32);
        self.builder.set_data_field::<u32>(29, 0u32);
        self.builder.reborrow().get_pointer_field(6).clear();
        self.builder.into()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(39) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              self.builder.into()
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xe1ce_566d_6b19_8fb5;
    }
    pub enum Which<A0> {
      None(()),
      Some(A0),
    }
    pub type WhichReader<'a,> = Which<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::some::Reader<'a>>;
    pub type WhichBuilder<'a,> = Which<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::some::Builder<'a>>;

    pub mod some {
      #[derive(Copy, Clone)]
      pub struct Owned(());
      impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

      pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
      impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
      impl <'a,> ::core::clone::Clone for Reader<'a,>  {
        fn clone(&self) -> Self { *self }
      }

      impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
          Self { reader,  }
        }
      }

      impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
        fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
          self.reader
        }
      }

      impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
          self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
      }

      impl <'a,> Reader<'a,>  {
        pub fn reborrow(&self) -> Reader<'_,> {
          Self { .. *self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.reader.total_size()
        }
        #[inline]
        pub fn get_uuid(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::some::uuid::Reader<'a> {
          self.reader.into()
        }
        #[inline]
        pub fn get_entity(self) -> ::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Reader<'a>> {
          ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
        }
        #[inline]
        pub fn has_entity(&self) -> bool {
          !self.reader.get_pointer_field(6).is_null()
        }
      }

      pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
      impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
      }
      impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
          Self { builder,  }
        }
      }

      impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
          self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
      }

      impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
          builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
        }
        fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
        fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
      }

      impl <'a,> Builder<'a,>  {
        pub fn into_reader(self) -> Reader<'a,> {
          self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_,> {
          Builder { builder: self.builder.reborrow() }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_,> {
          self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_uuid(self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::some::uuid::Builder<'a> {
          self.builder.into()
        }
        #[inline]
        pub fn init_uuid(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::some::uuid::Builder<'a> {
          self.builder.set_data_field::<u32>(26, 0u32);
          self.builder.set_data_field::<u32>(27, 0u32);
          self.builder.set_data_field::<u32>(28, 0u32);
          self.builder.set_data_field::<u32>(29, 0u32);
          self.builder.into()
        }
        #[inline]
        pub fn get_entity(self) -> ::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Builder<'a>> {
          ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
        }
        #[inline]
        pub fn set_entity(&mut self, value: crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Reader<'_>) -> ::capnp::Result<()> {
          ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
        }
        #[inline]
        pub fn init_entity(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Builder<'a> {
          ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), 0)
        }
        #[inline]
        pub fn has_entity(&self) -> bool {
          !self.builder.is_pointer_field_null(6)
        }
      }

      pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
      impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
          Self { _typeless: typeless,  }
        }
      }
      impl Pipeline  {
        pub fn get_uuid(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::root_vehicle::some::uuid::Pipeline {
          ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
        }
        pub fn get_entity(&self) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Pipeline {
          ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(6))
        }
      }
      mod _private {
        pub const TYPE_ID: u64 = 0xbb13_5874_77e1_a14b;
      }

      pub mod uuid {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
        impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
        impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

        pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
        impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
        impl <'a,> ::core::clone::Clone for Reader<'a,>  {
          fn clone(&self) -> Self { *self }
        }

        impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
          const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
          fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader,  }
          }
        }

        impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
          fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
          }
        }

        impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
          fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
          }
        }

        impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
          fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
          }
        }

        impl <'a,> Reader<'a,>  {
          pub fn reborrow(&self) -> Reader<'_,> {
            Self { .. *self }
          }

          pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
          }
          #[inline]
          pub fn get_x0(self) -> u32 {
            self.reader.get_data_field::<u32>(26)
          }
          #[inline]
          pub fn get_x1(self) -> u32 {
            self.reader.get_data_field::<u32>(27)
          }
          #[inline]
          pub fn get_x2(self) -> u32 {
            self.reader.get_data_field::<u32>(28)
          }
          #[inline]
          pub fn get_x3(self) -> u32 {
            self.reader.get_data_field::<u32>(29)
          }
        }

        pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
        impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
          const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
        }
        impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
          const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
          fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder,  }
          }
        }

        impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
          fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
          }
        }

        impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
          fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
          }
          fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
          }
        }

        impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
          fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
        }

        impl <'a,> Builder<'a,>  {
          pub fn into_reader(self) -> Reader<'a,> {
            self.builder.into_reader().into()
          }
          pub fn reborrow(&mut self) -> Builder<'_,> {
            Builder { builder: self.builder.reborrow() }
          }
          pub fn reborrow_as_reader(&self) -> Reader<'_,> {
            self.builder.as_reader().into()
          }

          pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
          }
          #[inline]
          pub fn get_x0(self) -> u32 {
            self.builder.get_data_field::<u32>(26)
          }
          #[inline]
          pub fn set_x0(&mut self, value: u32)  {
            self.builder.set_data_field::<u32>(26, value);
          }
          #[inline]
          pub fn get_x1(self) -> u32 {
            self.builder.get_data_field::<u32>(27)
          }
          #[inline]
          pub fn set_x1(&mut self, value: u32)  {
            self.builder.set_data_field::<u32>(27, value);
          }
          #[inline]
          pub fn get_x2(self) -> u32 {
            self.builder.get_data_field::<u32>(28)
          }
          #[inline]
          pub fn set_x2(&mut self, value: u32)  {
            self.builder.set_data_field::<u32>(28, value);
          }
          #[inline]
          pub fn get_x3(self) -> u32 {
            self.builder.get_data_field::<u32>(29)
          }
          #[inline]
          pub fn set_x3(&mut self, value: u32)  {
            self.builder.set_data_field::<u32>(29, value);
          }
        }

        pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
          fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self { _typeless: typeless,  }
          }
        }
        impl Pipeline  {
        }
        mod _private {
          pub const TYPE_ID: u64 = 0x83b8_f3d5_b8e1_61dd;
        }
      }
    }
  }

  pub mod shoulder_entity_left {
    pub use self::Which::{None,Some};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn has_some(&self) -> bool {
        if self.reader.get_data_field::<u16>(60) != 1 { return false; }
        !self.reader.get_pointer_field(7).is_null()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(60) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_none(&mut self, _value: ())  {
        self.builder.set_data_field::<u16>(60, 0);
      }
      #[inline]
      pub fn set_some(&mut self, value: crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(60, 1);
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
      }
      #[inline]
      pub fn init_some(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Builder<'a> {
        self.builder.set_data_field::<u16>(60, 1);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), 0)
      }
      #[inline]
      pub fn has_some(&self) -> bool {
        if self.builder.get_data_field::<u16>(60) != 1 { return false; }
        !self.builder.is_pointer_field_null(7)
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(60) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0xf770_22cb_2838_521d;
    }
    pub enum Which<A0> {
      None(()),
      Some(A0),
    }
    pub type WhichReader<'a,> = Which<::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Reader<'a>>>;
    pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Builder<'a>>>;
  }

  pub mod shoulder_entity_right {
    pub use self::Which::{None,Some};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn has_some(&self) -> bool {
        if self.reader.get_data_field::<u16>(61) != 1 { return false; }
        !self.reader.get_pointer_field(8).is_null()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(61) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 16, pointers: 10 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_none(&mut self, _value: ())  {
        self.builder.set_data_field::<u16>(61, 0);
      }
      #[inline]
      pub fn set_some(&mut self, value: crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(61, 1);
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false)
      }
      #[inline]
      pub fn init_some(self, ) -> crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Builder<'a> {
        self.builder.set_data_field::<u16>(61, 1);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), 0)
      }
      #[inline]
      pub fn has_some(&self) -> bool {
        if self.builder.get_data_field::<u16>(61) != 1 { return false; }
        !self.builder.is_pointer_field_null(8)
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(61) {
          0 => {
            ::core::result::Result::Ok(None(
              ()
            ))
          }
          1 => {
            ::core::result::Result::Ok(Some(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub const TYPE_ID: u64 = 0x8bc9_8a23_c654_611c;
    }
    pub enum Which<A0> {
      None(()),
      Some(A0),
    }
    pub type WhichReader<'a,> = Which<::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Reader<'a>>>;
    pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::datasets::minecraft_savedata::minecraft_savedata_capnp::entity::Builder<'a>>>;
  }
}

pub mod players {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_players(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_players(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_players(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_players(&mut self, value: ::capnp::struct_list::Reader<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_players(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::datasets::minecraft_savedata::minecraft_savedata_capnp::player::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_players(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub const TYPE_ID: u64 = 0x9a2e_339d_0113_73c2;
  }
}
