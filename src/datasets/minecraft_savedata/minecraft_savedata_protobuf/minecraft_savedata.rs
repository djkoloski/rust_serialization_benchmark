// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 31.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `minecraft_savedata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:prost.minecraft_savedata.Item)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Item {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Item.count)
    pub count: i32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Item.slot)
    pub slot: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Item.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Item.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Item {
    fn default() -> &'a Item {
        <Item as ::protobuf::Message>::default_instance()
    }
}

impl Item {
    pub fn new() -> Item {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &Item| { &m.count },
            |m: &mut Item| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slot",
            |m: &Item| { &m.slot },
            |m: &mut Item| { &mut m.slot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Item| { &m.id },
            |m: &mut Item| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Item>(
            "Item",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Item {
    const NAME: &'static str = "Item";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = is.read_int32()?;
                },
                16 => {
                    self.slot = is.read_uint32()?;
                },
                26 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.count);
        }
        if self.slot != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.slot);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.count != 0 {
            os.write_int32(1, self.count)?;
        }
        if self.slot != 0 {
            os.write_uint32(2, self.slot)?;
        }
        if !self.id.is_empty() {
            os.write_string(3, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Item {
        Item::new()
    }

    fn clear(&mut self) {
        self.count = 0;
        self.slot = 0;
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Item {
        static instance: Item = Item {
            count: 0,
            slot: 0,
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Item {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Item").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Item {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Item {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.Abilities)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Abilities {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Abilities.walk_speed)
    pub walk_speed: f32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Abilities.fly_speed)
    pub fly_speed: f32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Abilities.may_fly)
    pub may_fly: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Abilities.flying)
    pub flying: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Abilities.invulnerable)
    pub invulnerable: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Abilities.may_build)
    pub may_build: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Abilities.instabuild)
    pub instabuild: bool,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Abilities.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Abilities {
    fn default() -> &'a Abilities {
        <Abilities as ::protobuf::Message>::default_instance()
    }
}

impl Abilities {
    pub fn new() -> Abilities {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "walk_speed",
            |m: &Abilities| { &m.walk_speed },
            |m: &mut Abilities| { &mut m.walk_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fly_speed",
            |m: &Abilities| { &m.fly_speed },
            |m: &mut Abilities| { &mut m.fly_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "may_fly",
            |m: &Abilities| { &m.may_fly },
            |m: &mut Abilities| { &mut m.may_fly },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flying",
            |m: &Abilities| { &m.flying },
            |m: &mut Abilities| { &mut m.flying },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invulnerable",
            |m: &Abilities| { &m.invulnerable },
            |m: &mut Abilities| { &mut m.invulnerable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "may_build",
            |m: &Abilities| { &m.may_build },
            |m: &mut Abilities| { &mut m.may_build },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "instabuild",
            |m: &Abilities| { &m.instabuild },
            |m: &mut Abilities| { &mut m.instabuild },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Abilities>(
            "Abilities",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Abilities {
    const NAME: &'static str = "Abilities";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.walk_speed = is.read_float()?;
                },
                21 => {
                    self.fly_speed = is.read_float()?;
                },
                24 => {
                    self.may_fly = is.read_bool()?;
                },
                32 => {
                    self.flying = is.read_bool()?;
                },
                40 => {
                    self.invulnerable = is.read_bool()?;
                },
                48 => {
                    self.may_build = is.read_bool()?;
                },
                56 => {
                    self.instabuild = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.walk_speed != 0. {
            my_size += 1 + 4;
        }
        if self.fly_speed != 0. {
            my_size += 1 + 4;
        }
        if self.may_fly != false {
            my_size += 1 + 1;
        }
        if self.flying != false {
            my_size += 1 + 1;
        }
        if self.invulnerable != false {
            my_size += 1 + 1;
        }
        if self.may_build != false {
            my_size += 1 + 1;
        }
        if self.instabuild != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.walk_speed != 0. {
            os.write_float(1, self.walk_speed)?;
        }
        if self.fly_speed != 0. {
            os.write_float(2, self.fly_speed)?;
        }
        if self.may_fly != false {
            os.write_bool(3, self.may_fly)?;
        }
        if self.flying != false {
            os.write_bool(4, self.flying)?;
        }
        if self.invulnerable != false {
            os.write_bool(5, self.invulnerable)?;
        }
        if self.may_build != false {
            os.write_bool(6, self.may_build)?;
        }
        if self.instabuild != false {
            os.write_bool(7, self.instabuild)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Abilities {
        Abilities::new()
    }

    fn clear(&mut self) {
        self.walk_speed = 0.;
        self.fly_speed = 0.;
        self.may_fly = false;
        self.flying = false;
        self.invulnerable = false;
        self.may_build = false;
        self.instabuild = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Abilities {
        static instance: Abilities = Abilities {
            walk_speed: 0.,
            fly_speed: 0.,
            may_fly: false,
            flying: false,
            invulnerable: false,
            may_build: false,
            instabuild: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Abilities {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Abilities").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Abilities {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Abilities {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.Vector3d)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vector3d {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Vector3d.x)
    pub x: f64,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Vector3d.y)
    pub y: f64,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Vector3d.z)
    pub z: f64,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Vector3d.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vector3d {
    fn default() -> &'a Vector3d {
        <Vector3d as ::protobuf::Message>::default_instance()
    }
}

impl Vector3d {
    pub fn new() -> Vector3d {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Vector3d| { &m.x },
            |m: &mut Vector3d| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Vector3d| { &m.y },
            |m: &mut Vector3d| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "z",
            |m: &Vector3d| { &m.z },
            |m: &mut Vector3d| { &mut m.z },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vector3d>(
            "Vector3d",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vector3d {
    const NAME: &'static str = "Vector3d";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.x = is.read_double()?;
                },
                17 => {
                    self.y = is.read_double()?;
                },
                25 => {
                    self.z = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 8;
        }
        if self.y != 0. {
            my_size += 1 + 8;
        }
        if self.z != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_double(1, self.x)?;
        }
        if self.y != 0. {
            os.write_double(2, self.y)?;
        }
        if self.z != 0. {
            os.write_double(3, self.z)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vector3d {
        Vector3d::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vector3d {
        static instance: Vector3d = Vector3d {
            x: 0.,
            y: 0.,
            z: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vector3d {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vector3d").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vector3d {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector3d {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.Vector2f)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vector2f {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Vector2f.x)
    pub x: f32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Vector2f.y)
    pub y: f32,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Vector2f.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vector2f {
    fn default() -> &'a Vector2f {
        <Vector2f as ::protobuf::Message>::default_instance()
    }
}

impl Vector2f {
    pub fn new() -> Vector2f {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Vector2f| { &m.x },
            |m: &mut Vector2f| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Vector2f| { &m.y },
            |m: &mut Vector2f| { &mut m.y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vector2f>(
            "Vector2f",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vector2f {
    const NAME: &'static str = "Vector2f";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.x = is.read_float()?;
                },
                21 => {
                    self.y = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 4;
        }
        if self.y != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vector2f {
        Vector2f::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vector2f {
        static instance: Vector2f = Vector2f {
            x: 0.,
            y: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vector2f {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vector2f").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vector2f {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector2f {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.Uuid)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Uuid {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Uuid.x0)
    pub x0: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Uuid.x1)
    pub x1: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Uuid.x2)
    pub x2: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Uuid.x3)
    pub x3: u32,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Uuid.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Uuid {
    fn default() -> &'a Uuid {
        <Uuid as ::protobuf::Message>::default_instance()
    }
}

impl Uuid {
    pub fn new() -> Uuid {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x0",
            |m: &Uuid| { &m.x0 },
            |m: &mut Uuid| { &mut m.x0 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x1",
            |m: &Uuid| { &m.x1 },
            |m: &mut Uuid| { &mut m.x1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x2",
            |m: &Uuid| { &m.x2 },
            |m: &mut Uuid| { &mut m.x2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x3",
            |m: &Uuid| { &m.x3 },
            |m: &mut Uuid| { &mut m.x3 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Uuid>(
            "Uuid",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Uuid {
    const NAME: &'static str = "Uuid";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x0 = is.read_uint32()?;
                },
                16 => {
                    self.x1 = is.read_uint32()?;
                },
                24 => {
                    self.x2 = is.read_uint32()?;
                },
                32 => {
                    self.x3 = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x0 != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.x0);
        }
        if self.x1 != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.x1);
        }
        if self.x2 != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.x2);
        }
        if self.x3 != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.x3);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x0 != 0 {
            os.write_uint32(1, self.x0)?;
        }
        if self.x1 != 0 {
            os.write_uint32(2, self.x1)?;
        }
        if self.x2 != 0 {
            os.write_uint32(3, self.x2)?;
        }
        if self.x3 != 0 {
            os.write_uint32(4, self.x3)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Uuid {
        Uuid::new()
    }

    fn clear(&mut self) {
        self.x0 = 0;
        self.x1 = 0;
        self.x2 = 0;
        self.x3 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Uuid {
        static instance: Uuid = Uuid {
            x0: 0,
            x1: 0,
            x2: 0,
            x3: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Uuid {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Uuid").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Uuid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Uuid {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.Entity)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Entity {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.pos)
    pub pos: ::protobuf::MessageField<Vector3d>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.motion)
    pub motion: ::protobuf::MessageField<Vector3d>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.rotation)
    pub rotation: ::protobuf::MessageField<Vector2f>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.fall_distance)
    pub fall_distance: f32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.fire)
    pub fire: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.air)
    pub air: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.on_ground)
    pub on_ground: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.no_gravity)
    pub no_gravity: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.invulnerable)
    pub invulnerable: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.portal_cooldown)
    pub portal_cooldown: i32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.uuid)
    pub uuid: ::protobuf::MessageField<Uuid>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.custom_name)
    pub custom_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.custom_name_visible)
    pub custom_name_visible: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.silent)
    pub silent: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Entity.glowing)
    pub glowing: bool,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Entity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Entity {
    fn default() -> &'a Entity {
        <Entity as ::protobuf::Message>::default_instance()
    }
}

impl Entity {
    pub fn new() -> Entity {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Entity| { &m.id },
            |m: &mut Entity| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector3d>(
            "pos",
            |m: &Entity| { &m.pos },
            |m: &mut Entity| { &mut m.pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector3d>(
            "motion",
            |m: &Entity| { &m.motion },
            |m: &mut Entity| { &mut m.motion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector2f>(
            "rotation",
            |m: &Entity| { &m.rotation },
            |m: &mut Entity| { &mut m.rotation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fall_distance",
            |m: &Entity| { &m.fall_distance },
            |m: &mut Entity| { &mut m.fall_distance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fire",
            |m: &Entity| { &m.fire },
            |m: &mut Entity| { &mut m.fire },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "air",
            |m: &Entity| { &m.air },
            |m: &mut Entity| { &mut m.air },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "on_ground",
            |m: &Entity| { &m.on_ground },
            |m: &mut Entity| { &mut m.on_ground },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "no_gravity",
            |m: &Entity| { &m.no_gravity },
            |m: &mut Entity| { &mut m.no_gravity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invulnerable",
            |m: &Entity| { &m.invulnerable },
            |m: &mut Entity| { &mut m.invulnerable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "portal_cooldown",
            |m: &Entity| { &m.portal_cooldown },
            |m: &mut Entity| { &mut m.portal_cooldown },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Uuid>(
            "uuid",
            |m: &Entity| { &m.uuid },
            |m: &mut Entity| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "custom_name",
            |m: &Entity| { &m.custom_name },
            |m: &mut Entity| { &mut m.custom_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "custom_name_visible",
            |m: &Entity| { &m.custom_name_visible },
            |m: &mut Entity| { &mut m.custom_name_visible },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "silent",
            |m: &Entity| { &m.silent },
            |m: &mut Entity| { &mut m.silent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "glowing",
            |m: &Entity| { &m.glowing },
            |m: &mut Entity| { &mut m.glowing },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entity>(
            "Entity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Entity {
    const NAME: &'static str = "Entity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.motion)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rotation)?;
                },
                45 => {
                    self.fall_distance = is.read_float()?;
                },
                48 => {
                    self.fire = is.read_uint32()?;
                },
                56 => {
                    self.air = is.read_uint32()?;
                },
                64 => {
                    self.on_ground = is.read_bool()?;
                },
                72 => {
                    self.no_gravity = is.read_bool()?;
                },
                80 => {
                    self.invulnerable = is.read_bool()?;
                },
                88 => {
                    self.portal_cooldown = is.read_int32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.uuid)?;
                },
                106 => {
                    self.custom_name = ::std::option::Option::Some(is.read_string()?);
                },
                112 => {
                    self.custom_name_visible = is.read_bool()?;
                },
                120 => {
                    self.silent = is.read_bool()?;
                },
                128 => {
                    self.glowing = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.motion.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rotation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.fall_distance != 0. {
            my_size += 1 + 4;
        }
        if self.fire != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.fire);
        }
        if self.air != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.air);
        }
        if self.on_ground != false {
            my_size += 1 + 1;
        }
        if self.no_gravity != false {
            my_size += 1 + 1;
        }
        if self.invulnerable != false {
            my_size += 1 + 1;
        }
        if self.portal_cooldown != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.portal_cooldown);
        }
        if let Some(v) = self.uuid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.custom_name.as_ref() {
            my_size += ::protobuf::rt::string_size(13, &v);
        }
        if self.custom_name_visible != false {
            my_size += 1 + 1;
        }
        if self.silent != false {
            my_size += 1 + 1;
        }
        if self.glowing != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.motion.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.rotation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.fall_distance != 0. {
            os.write_float(5, self.fall_distance)?;
        }
        if self.fire != 0 {
            os.write_uint32(6, self.fire)?;
        }
        if self.air != 0 {
            os.write_uint32(7, self.air)?;
        }
        if self.on_ground != false {
            os.write_bool(8, self.on_ground)?;
        }
        if self.no_gravity != false {
            os.write_bool(9, self.no_gravity)?;
        }
        if self.invulnerable != false {
            os.write_bool(10, self.invulnerable)?;
        }
        if self.portal_cooldown != 0 {
            os.write_int32(11, self.portal_cooldown)?;
        }
        if let Some(v) = self.uuid.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.custom_name.as_ref() {
            os.write_string(13, v)?;
        }
        if self.custom_name_visible != false {
            os.write_bool(14, self.custom_name_visible)?;
        }
        if self.silent != false {
            os.write_bool(15, self.silent)?;
        }
        if self.glowing != false {
            os.write_bool(16, self.glowing)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Entity {
        Entity::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.pos.clear();
        self.motion.clear();
        self.rotation.clear();
        self.fall_distance = 0.;
        self.fire = 0;
        self.air = 0;
        self.on_ground = false;
        self.no_gravity = false;
        self.invulnerable = false;
        self.portal_cooldown = 0;
        self.uuid.clear();
        self.custom_name = ::std::option::Option::None;
        self.custom_name_visible = false;
        self.silent = false;
        self.glowing = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Entity {
        static instance: Entity = Entity {
            id: ::std::string::String::new(),
            pos: ::protobuf::MessageField::none(),
            motion: ::protobuf::MessageField::none(),
            rotation: ::protobuf::MessageField::none(),
            fall_distance: 0.,
            fire: 0,
            air: 0,
            on_ground: false,
            no_gravity: false,
            invulnerable: false,
            portal_cooldown: 0,
            uuid: ::protobuf::MessageField::none(),
            custom_name: ::std::option::Option::None,
            custom_name_visible: false,
            silent: false,
            glowing: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Entity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Entity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Entity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.RecipeBook)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RecipeBook {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.recipes)
    pub recipes: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.to_be_displayed)
    pub to_be_displayed: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.is_filtering_craftable)
    pub is_filtering_craftable: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.is_gui_open)
    pub is_gui_open: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.is_furnace_filtering_craftable)
    pub is_furnace_filtering_craftable: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.is_furnace_gui_open)
    pub is_furnace_gui_open: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.is_blasting_furnace_filtering_craftable)
    pub is_blasting_furnace_filtering_craftable: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.is_blasting_furnace_gui_open)
    pub is_blasting_furnace_gui_open: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.is_smoker_filtering_craftable)
    pub is_smoker_filtering_craftable: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.RecipeBook.is_smoker_gui_open)
    pub is_smoker_gui_open: bool,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.RecipeBook.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RecipeBook {
    fn default() -> &'a RecipeBook {
        <RecipeBook as ::protobuf::Message>::default_instance()
    }
}

impl RecipeBook {
    pub fn new() -> RecipeBook {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recipes",
            |m: &RecipeBook| { &m.recipes },
            |m: &mut RecipeBook| { &mut m.recipes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "to_be_displayed",
            |m: &RecipeBook| { &m.to_be_displayed },
            |m: &mut RecipeBook| { &mut m.to_be_displayed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_filtering_craftable",
            |m: &RecipeBook| { &m.is_filtering_craftable },
            |m: &mut RecipeBook| { &mut m.is_filtering_craftable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_gui_open",
            |m: &RecipeBook| { &m.is_gui_open },
            |m: &mut RecipeBook| { &mut m.is_gui_open },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_furnace_filtering_craftable",
            |m: &RecipeBook| { &m.is_furnace_filtering_craftable },
            |m: &mut RecipeBook| { &mut m.is_furnace_filtering_craftable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_furnace_gui_open",
            |m: &RecipeBook| { &m.is_furnace_gui_open },
            |m: &mut RecipeBook| { &mut m.is_furnace_gui_open },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_blasting_furnace_filtering_craftable",
            |m: &RecipeBook| { &m.is_blasting_furnace_filtering_craftable },
            |m: &mut RecipeBook| { &mut m.is_blasting_furnace_filtering_craftable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_blasting_furnace_gui_open",
            |m: &RecipeBook| { &m.is_blasting_furnace_gui_open },
            |m: &mut RecipeBook| { &mut m.is_blasting_furnace_gui_open },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_smoker_filtering_craftable",
            |m: &RecipeBook| { &m.is_smoker_filtering_craftable },
            |m: &mut RecipeBook| { &mut m.is_smoker_filtering_craftable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_smoker_gui_open",
            |m: &RecipeBook| { &m.is_smoker_gui_open },
            |m: &mut RecipeBook| { &mut m.is_smoker_gui_open },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RecipeBook>(
            "RecipeBook",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RecipeBook {
    const NAME: &'static str = "RecipeBook";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.recipes.push(is.read_string()?);
                },
                18 => {
                    self.to_be_displayed.push(is.read_string()?);
                },
                24 => {
                    self.is_filtering_craftable = is.read_bool()?;
                },
                32 => {
                    self.is_gui_open = is.read_bool()?;
                },
                40 => {
                    self.is_furnace_filtering_craftable = is.read_bool()?;
                },
                48 => {
                    self.is_furnace_gui_open = is.read_bool()?;
                },
                56 => {
                    self.is_blasting_furnace_filtering_craftable = is.read_bool()?;
                },
                64 => {
                    self.is_blasting_furnace_gui_open = is.read_bool()?;
                },
                72 => {
                    self.is_smoker_filtering_craftable = is.read_bool()?;
                },
                80 => {
                    self.is_smoker_gui_open = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.recipes {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.to_be_displayed {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if self.is_filtering_craftable != false {
            my_size += 1 + 1;
        }
        if self.is_gui_open != false {
            my_size += 1 + 1;
        }
        if self.is_furnace_filtering_craftable != false {
            my_size += 1 + 1;
        }
        if self.is_furnace_gui_open != false {
            my_size += 1 + 1;
        }
        if self.is_blasting_furnace_filtering_craftable != false {
            my_size += 1 + 1;
        }
        if self.is_blasting_furnace_gui_open != false {
            my_size += 1 + 1;
        }
        if self.is_smoker_filtering_craftable != false {
            my_size += 1 + 1;
        }
        if self.is_smoker_gui_open != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.recipes {
            os.write_string(1, &v)?;
        };
        for v in &self.to_be_displayed {
            os.write_string(2, &v)?;
        };
        if self.is_filtering_craftable != false {
            os.write_bool(3, self.is_filtering_craftable)?;
        }
        if self.is_gui_open != false {
            os.write_bool(4, self.is_gui_open)?;
        }
        if self.is_furnace_filtering_craftable != false {
            os.write_bool(5, self.is_furnace_filtering_craftable)?;
        }
        if self.is_furnace_gui_open != false {
            os.write_bool(6, self.is_furnace_gui_open)?;
        }
        if self.is_blasting_furnace_filtering_craftable != false {
            os.write_bool(7, self.is_blasting_furnace_filtering_craftable)?;
        }
        if self.is_blasting_furnace_gui_open != false {
            os.write_bool(8, self.is_blasting_furnace_gui_open)?;
        }
        if self.is_smoker_filtering_craftable != false {
            os.write_bool(9, self.is_smoker_filtering_craftable)?;
        }
        if self.is_smoker_gui_open != false {
            os.write_bool(10, self.is_smoker_gui_open)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RecipeBook {
        RecipeBook::new()
    }

    fn clear(&mut self) {
        self.recipes.clear();
        self.to_be_displayed.clear();
        self.is_filtering_craftable = false;
        self.is_gui_open = false;
        self.is_furnace_filtering_craftable = false;
        self.is_furnace_gui_open = false;
        self.is_blasting_furnace_filtering_craftable = false;
        self.is_blasting_furnace_gui_open = false;
        self.is_smoker_filtering_craftable = false;
        self.is_smoker_gui_open = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RecipeBook {
        static instance: RecipeBook = RecipeBook {
            recipes: ::std::vec::Vec::new(),
            to_be_displayed: ::std::vec::Vec::new(),
            is_filtering_craftable: false,
            is_gui_open: false,
            is_furnace_filtering_craftable: false,
            is_furnace_gui_open: false,
            is_blasting_furnace_filtering_craftable: false,
            is_blasting_furnace_gui_open: false,
            is_smoker_filtering_craftable: false,
            is_smoker_gui_open: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RecipeBook {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RecipeBook").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RecipeBook {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecipeBook {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.Vehicle)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vehicle {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Vehicle.uuid)
    pub uuid: ::protobuf::MessageField<Uuid>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Vehicle.entity)
    pub entity: ::protobuf::MessageField<Entity>,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Vehicle.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vehicle {
    fn default() -> &'a Vehicle {
        <Vehicle as ::protobuf::Message>::default_instance()
    }
}

impl Vehicle {
    pub fn new() -> Vehicle {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Uuid>(
            "uuid",
            |m: &Vehicle| { &m.uuid },
            |m: &mut Vehicle| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Entity>(
            "entity",
            |m: &Vehicle| { &m.entity },
            |m: &mut Vehicle| { &mut m.entity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vehicle>(
            "Vehicle",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vehicle {
    const NAME: &'static str = "Vehicle";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.uuid)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.entity)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.uuid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.entity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.uuid.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.entity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vehicle {
        Vehicle::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.entity.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vehicle {
        static instance: Vehicle = Vehicle {
            uuid: ::protobuf::MessageField::none(),
            entity: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vehicle {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vehicle").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vehicle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vehicle {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.Player)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Player {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.game_type)
    pub game_type: ::protobuf::EnumOrUnknown<GameType>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.previous_game_type)
    pub previous_game_type: ::protobuf::EnumOrUnknown<GameType>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.score)
    pub score: i64,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.dimension)
    pub dimension: ::std::string::String,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.selected_item_slot)
    pub selected_item_slot: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.selected_item)
    pub selected_item: ::protobuf::MessageField<Item>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.spawn_dimension)
    pub spawn_dimension: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.spawn_x)
    pub spawn_x: i64,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.spawn_y)
    pub spawn_y: i64,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.spawn_z)
    pub spawn_z: i64,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.spawn_forced)
    pub spawn_forced: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.sleep_timer)
    pub sleep_timer: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.food_exhaustion_level)
    pub food_exhaustion_level: f32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.food_saturation_level)
    pub food_saturation_level: f32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.food_tick_timer)
    pub food_tick_timer: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.xp_level)
    pub xp_level: u32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.xp_p)
    pub xp_p: f32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.xp_total)
    pub xp_total: i32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.xp_seed)
    pub xp_seed: i32,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.inventory)
    pub inventory: ::std::vec::Vec<Item>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.ender_items)
    pub ender_items: ::std::vec::Vec<Item>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.abilities)
    pub abilities: ::protobuf::MessageField<Abilities>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.entered_nether_position)
    pub entered_nether_position: ::protobuf::MessageField<Vector3d>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.root_vehicle)
    pub root_vehicle: ::protobuf::MessageField<Vehicle>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.shoulder_entity_left)
    pub shoulder_entity_left: ::protobuf::MessageField<Entity>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.shoulder_entity_right)
    pub shoulder_entity_right: ::protobuf::MessageField<Entity>,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.seen_credits)
    pub seen_credits: bool,
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Player.recipe_book)
    pub recipe_book: ::protobuf::MessageField<RecipeBook>,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Player.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Player {
    fn default() -> &'a Player {
        <Player as ::protobuf::Message>::default_instance()
    }
}

impl Player {
    pub fn new() -> Player {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(28);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "game_type",
            |m: &Player| { &m.game_type },
            |m: &mut Player| { &mut m.game_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "previous_game_type",
            |m: &Player| { &m.previous_game_type },
            |m: &mut Player| { &mut m.previous_game_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "score",
            |m: &Player| { &m.score },
            |m: &mut Player| { &mut m.score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dimension",
            |m: &Player| { &m.dimension },
            |m: &mut Player| { &mut m.dimension },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "selected_item_slot",
            |m: &Player| { &m.selected_item_slot },
            |m: &mut Player| { &mut m.selected_item_slot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Item>(
            "selected_item",
            |m: &Player| { &m.selected_item },
            |m: &mut Player| { &mut m.selected_item },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "spawn_dimension",
            |m: &Player| { &m.spawn_dimension },
            |m: &mut Player| { &mut m.spawn_dimension },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spawn_x",
            |m: &Player| { &m.spawn_x },
            |m: &mut Player| { &mut m.spawn_x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spawn_y",
            |m: &Player| { &m.spawn_y },
            |m: &mut Player| { &mut m.spawn_y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spawn_z",
            |m: &Player| { &m.spawn_z },
            |m: &mut Player| { &mut m.spawn_z },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "spawn_forced",
            |m: &Player| { &m.spawn_forced },
            |m: &mut Player| { &mut m.spawn_forced },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sleep_timer",
            |m: &Player| { &m.sleep_timer },
            |m: &mut Player| { &mut m.sleep_timer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "food_exhaustion_level",
            |m: &Player| { &m.food_exhaustion_level },
            |m: &mut Player| { &mut m.food_exhaustion_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "food_saturation_level",
            |m: &Player| { &m.food_saturation_level },
            |m: &mut Player| { &mut m.food_saturation_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "food_tick_timer",
            |m: &Player| { &m.food_tick_timer },
            |m: &mut Player| { &mut m.food_tick_timer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "xp_level",
            |m: &Player| { &m.xp_level },
            |m: &mut Player| { &mut m.xp_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "xp_p",
            |m: &Player| { &m.xp_p },
            |m: &mut Player| { &mut m.xp_p },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "xp_total",
            |m: &Player| { &m.xp_total },
            |m: &mut Player| { &mut m.xp_total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "xp_seed",
            |m: &Player| { &m.xp_seed },
            |m: &mut Player| { &mut m.xp_seed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inventory",
            |m: &Player| { &m.inventory },
            |m: &mut Player| { &mut m.inventory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ender_items",
            |m: &Player| { &m.ender_items },
            |m: &mut Player| { &mut m.ender_items },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Abilities>(
            "abilities",
            |m: &Player| { &m.abilities },
            |m: &mut Player| { &mut m.abilities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vector3d>(
            "entered_nether_position",
            |m: &Player| { &m.entered_nether_position },
            |m: &mut Player| { &mut m.entered_nether_position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vehicle>(
            "root_vehicle",
            |m: &Player| { &m.root_vehicle },
            |m: &mut Player| { &mut m.root_vehicle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Entity>(
            "shoulder_entity_left",
            |m: &Player| { &m.shoulder_entity_left },
            |m: &mut Player| { &mut m.shoulder_entity_left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Entity>(
            "shoulder_entity_right",
            |m: &Player| { &m.shoulder_entity_right },
            |m: &mut Player| { &mut m.shoulder_entity_right },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seen_credits",
            |m: &Player| { &m.seen_credits },
            |m: &mut Player| { &mut m.seen_credits },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, RecipeBook>(
            "recipe_book",
            |m: &Player| { &m.recipe_book },
            |m: &mut Player| { &mut m.recipe_book },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Player>(
            "Player",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Player {
    const NAME: &'static str = "Player";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.game_type = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.previous_game_type = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.score = is.read_int64()?;
                },
                34 => {
                    self.dimension = is.read_string()?;
                },
                40 => {
                    self.selected_item_slot = is.read_uint32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selected_item)?;
                },
                58 => {
                    self.spawn_dimension = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.spawn_x = is.read_int64()?;
                },
                72 => {
                    self.spawn_y = is.read_int64()?;
                },
                80 => {
                    self.spawn_z = is.read_int64()?;
                },
                88 => {
                    self.spawn_forced = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.sleep_timer = is.read_uint32()?;
                },
                109 => {
                    self.food_exhaustion_level = is.read_float()?;
                },
                117 => {
                    self.food_saturation_level = is.read_float()?;
                },
                120 => {
                    self.food_tick_timer = is.read_uint32()?;
                },
                128 => {
                    self.xp_level = is.read_uint32()?;
                },
                141 => {
                    self.xp_p = is.read_float()?;
                },
                144 => {
                    self.xp_total = is.read_int32()?;
                },
                152 => {
                    self.xp_seed = is.read_int32()?;
                },
                162 => {
                    self.inventory.push(is.read_message()?);
                },
                170 => {
                    self.ender_items.push(is.read_message()?);
                },
                178 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.abilities)?;
                },
                186 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.entered_nether_position)?;
                },
                194 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.root_vehicle)?;
                },
                202 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.shoulder_entity_left)?;
                },
                210 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.shoulder_entity_right)?;
                },
                216 => {
                    self.seen_credits = is.read_bool()?;
                },
                226 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.recipe_book)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.game_type != ::protobuf::EnumOrUnknown::new(GameType::SURVIVAL) {
            my_size += ::protobuf::rt::int32_size(1, self.game_type.value());
        }
        if self.previous_game_type != ::protobuf::EnumOrUnknown::new(GameType::SURVIVAL) {
            my_size += ::protobuf::rt::int32_size(2, self.previous_game_type.value());
        }
        if self.score != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.score);
        }
        if !self.dimension.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.dimension);
        }
        if self.selected_item_slot != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.selected_item_slot);
        }
        if let Some(v) = self.selected_item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spawn_dimension.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if self.spawn_x != 0 {
            my_size += ::protobuf::rt::int64_size(8, self.spawn_x);
        }
        if self.spawn_y != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.spawn_y);
        }
        if self.spawn_z != 0 {
            my_size += ::protobuf::rt::int64_size(10, self.spawn_z);
        }
        if let Some(v) = self.spawn_forced {
            my_size += 1 + 1;
        }
        if self.sleep_timer != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.sleep_timer);
        }
        if self.food_exhaustion_level != 0. {
            my_size += 1 + 4;
        }
        if self.food_saturation_level != 0. {
            my_size += 1 + 4;
        }
        if self.food_tick_timer != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.food_tick_timer);
        }
        if self.xp_level != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.xp_level);
        }
        if self.xp_p != 0. {
            my_size += 2 + 4;
        }
        if self.xp_total != 0 {
            my_size += ::protobuf::rt::int32_size(18, self.xp_total);
        }
        if self.xp_seed != 0 {
            my_size += ::protobuf::rt::int32_size(19, self.xp_seed);
        }
        for value in &self.inventory {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.ender_items {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.abilities.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.entered_nether_position.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.root_vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.shoulder_entity_left.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.shoulder_entity_right.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.seen_credits != false {
            my_size += 2 + 1;
        }
        if let Some(v) = self.recipe_book.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.game_type != ::protobuf::EnumOrUnknown::new(GameType::SURVIVAL) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.game_type))?;
        }
        if self.previous_game_type != ::protobuf::EnumOrUnknown::new(GameType::SURVIVAL) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.previous_game_type))?;
        }
        if self.score != 0 {
            os.write_int64(3, self.score)?;
        }
        if !self.dimension.is_empty() {
            os.write_string(4, &self.dimension)?;
        }
        if self.selected_item_slot != 0 {
            os.write_uint32(5, self.selected_item_slot)?;
        }
        if let Some(v) = self.selected_item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.spawn_dimension.as_ref() {
            os.write_string(7, v)?;
        }
        if self.spawn_x != 0 {
            os.write_int64(8, self.spawn_x)?;
        }
        if self.spawn_y != 0 {
            os.write_int64(9, self.spawn_y)?;
        }
        if self.spawn_z != 0 {
            os.write_int64(10, self.spawn_z)?;
        }
        if let Some(v) = self.spawn_forced {
            os.write_bool(11, v)?;
        }
        if self.sleep_timer != 0 {
            os.write_uint32(12, self.sleep_timer)?;
        }
        if self.food_exhaustion_level != 0. {
            os.write_float(13, self.food_exhaustion_level)?;
        }
        if self.food_saturation_level != 0. {
            os.write_float(14, self.food_saturation_level)?;
        }
        if self.food_tick_timer != 0 {
            os.write_uint32(15, self.food_tick_timer)?;
        }
        if self.xp_level != 0 {
            os.write_uint32(16, self.xp_level)?;
        }
        if self.xp_p != 0. {
            os.write_float(17, self.xp_p)?;
        }
        if self.xp_total != 0 {
            os.write_int32(18, self.xp_total)?;
        }
        if self.xp_seed != 0 {
            os.write_int32(19, self.xp_seed)?;
        }
        for v in &self.inventory {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        };
        for v in &self.ender_items {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        if let Some(v) = self.abilities.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        }
        if let Some(v) = self.entered_nether_position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        }
        if let Some(v) = self.root_vehicle.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
        }
        if let Some(v) = self.shoulder_entity_left.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(25, v, os)?;
        }
        if let Some(v) = self.shoulder_entity_right.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        }
        if self.seen_credits != false {
            os.write_bool(27, self.seen_credits)?;
        }
        if let Some(v) = self.recipe_book.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(28, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Player {
        Player::new()
    }

    fn clear(&mut self) {
        self.game_type = ::protobuf::EnumOrUnknown::new(GameType::SURVIVAL);
        self.previous_game_type = ::protobuf::EnumOrUnknown::new(GameType::SURVIVAL);
        self.score = 0;
        self.dimension.clear();
        self.selected_item_slot = 0;
        self.selected_item.clear();
        self.spawn_dimension = ::std::option::Option::None;
        self.spawn_x = 0;
        self.spawn_y = 0;
        self.spawn_z = 0;
        self.spawn_forced = ::std::option::Option::None;
        self.sleep_timer = 0;
        self.food_exhaustion_level = 0.;
        self.food_saturation_level = 0.;
        self.food_tick_timer = 0;
        self.xp_level = 0;
        self.xp_p = 0.;
        self.xp_total = 0;
        self.xp_seed = 0;
        self.inventory.clear();
        self.ender_items.clear();
        self.abilities.clear();
        self.entered_nether_position.clear();
        self.root_vehicle.clear();
        self.shoulder_entity_left.clear();
        self.shoulder_entity_right.clear();
        self.seen_credits = false;
        self.recipe_book.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Player {
        static instance: Player = Player {
            game_type: ::protobuf::EnumOrUnknown::from_i32(0),
            previous_game_type: ::protobuf::EnumOrUnknown::from_i32(0),
            score: 0,
            dimension: ::std::string::String::new(),
            selected_item_slot: 0,
            selected_item: ::protobuf::MessageField::none(),
            spawn_dimension: ::std::option::Option::None,
            spawn_x: 0,
            spawn_y: 0,
            spawn_z: 0,
            spawn_forced: ::std::option::Option::None,
            sleep_timer: 0,
            food_exhaustion_level: 0.,
            food_saturation_level: 0.,
            food_tick_timer: 0,
            xp_level: 0,
            xp_p: 0.,
            xp_total: 0,
            xp_seed: 0,
            inventory: ::std::vec::Vec::new(),
            ender_items: ::std::vec::Vec::new(),
            abilities: ::protobuf::MessageField::none(),
            entered_nether_position: ::protobuf::MessageField::none(),
            root_vehicle: ::protobuf::MessageField::none(),
            shoulder_entity_left: ::protobuf::MessageField::none(),
            shoulder_entity_right: ::protobuf::MessageField::none(),
            seen_credits: false,
            recipe_book: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Player {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Player").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Player {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Player {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.minecraft_savedata.Players)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Players {
    // message fields
    // @@protoc_insertion_point(field:prost.minecraft_savedata.Players.players)
    pub players: ::std::vec::Vec<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:prost.minecraft_savedata.Players.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Players {
    fn default() -> &'a Players {
        <Players as ::protobuf::Message>::default_instance()
    }
}

impl Players {
    pub fn new() -> Players {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "players",
            |m: &Players| { &m.players },
            |m: &mut Players| { &mut m.players },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Players>(
            "Players",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Players {
    const NAME: &'static str = "Players";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.players.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.players {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Players {
        Players::new()
    }

    fn clear(&mut self) {
        self.players.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Players {
        static instance: Players = Players {
            players: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Players {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Players").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Players {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Players {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:prost.minecraft_savedata.GameType)
pub enum GameType {
    // @@protoc_insertion_point(enum_value:prost.minecraft_savedata.GameType.SURVIVAL)
    SURVIVAL = 0,
    // @@protoc_insertion_point(enum_value:prost.minecraft_savedata.GameType.CREATIVE)
    CREATIVE = 1,
    // @@protoc_insertion_point(enum_value:prost.minecraft_savedata.GameType.ADVENTURE)
    ADVENTURE = 2,
    // @@protoc_insertion_point(enum_value:prost.minecraft_savedata.GameType.SPECTATOR)
    SPECTATOR = 3,
}

impl ::protobuf::Enum for GameType {
    const NAME: &'static str = "GameType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GameType> {
        match value {
            0 => ::std::option::Option::Some(GameType::SURVIVAL),
            1 => ::std::option::Option::Some(GameType::CREATIVE),
            2 => ::std::option::Option::Some(GameType::ADVENTURE),
            3 => ::std::option::Option::Some(GameType::SPECTATOR),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<GameType> {
        match str {
            "SURVIVAL" => ::std::option::Option::Some(GameType::SURVIVAL),
            "CREATIVE" => ::std::option::Option::Some(GameType::CREATIVE),
            "ADVENTURE" => ::std::option::Option::Some(GameType::ADVENTURE),
            "SPECTATOR" => ::std::option::Option::Some(GameType::SPECTATOR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [GameType] = &[
        GameType::SURVIVAL,
        GameType::CREATIVE,
        GameType::ADVENTURE,
        GameType::SPECTATOR,
    ];
}

impl ::protobuf::EnumFull for GameType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("GameType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for GameType {
    fn default() -> Self {
        GameType::SURVIVAL
    }
}

impl GameType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<GameType>("GameType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18minecraft_savedata.proto\x12\x18prost.minecraft_savedata\"@\n\x04I\
    tem\x12\x14\n\x05count\x18\x01\x20\x01(\x05R\x05count\x12\x12\n\x04slot\
    \x18\x02\x20\x01(\rR\x04slot\x12\x0e\n\x02id\x18\x03\x20\x01(\tR\x02id\"\
    \xd9\x01\n\tAbilities\x12\x1d\n\nwalk_speed\x18\x01\x20\x01(\x02R\twalkS\
    peed\x12\x1b\n\tfly_speed\x18\x02\x20\x01(\x02R\x08flySpeed\x12\x17\n\
    \x07may_fly\x18\x03\x20\x01(\x08R\x06mayFly\x12\x16\n\x06flying\x18\x04\
    \x20\x01(\x08R\x06flying\x12\"\n\x0cinvulnerable\x18\x05\x20\x01(\x08R\
    \x0cinvulnerable\x12\x1b\n\tmay_build\x18\x06\x20\x01(\x08R\x08mayBuild\
    \x12\x1e\n\ninstabuild\x18\x07\x20\x01(\x08R\ninstabuild\"4\n\x08Vector3\
    d\x12\x0c\n\x01x\x18\x01\x20\x01(\x01R\x01x\x12\x0c\n\x01y\x18\x02\x20\
    \x01(\x01R\x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x01R\x01z\"&\n\x08Vector\
    2f\x12\x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\
    \x01(\x02R\x01y\"F\n\x04Uuid\x12\x0e\n\x02x0\x18\x01\x20\x01(\rR\x02x0\
    \x12\x0e\n\x02x1\x18\x02\x20\x01(\rR\x02x1\x12\x0e\n\x02x2\x18\x03\x20\
    \x01(\rR\x02x2\x12\x0e\n\x02x3\x18\x04\x20\x01(\rR\x02x3\"\xea\x04\n\x06\
    Entity\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x124\n\x03pos\x18\x02\
    \x20\x01(\x0b2\".prost.minecraft_savedata.Vector3dR\x03pos\x12:\n\x06mot\
    ion\x18\x03\x20\x01(\x0b2\".prost.minecraft_savedata.Vector3dR\x06motion\
    \x12>\n\x08rotation\x18\x04\x20\x01(\x0b2\".prost.minecraft_savedata.Vec\
    tor2fR\x08rotation\x12#\n\rfall_distance\x18\x05\x20\x01(\x02R\x0cfallDi\
    stance\x12\x12\n\x04fire\x18\x06\x20\x01(\rR\x04fire\x12\x10\n\x03air\
    \x18\x07\x20\x01(\rR\x03air\x12\x1b\n\ton_ground\x18\x08\x20\x01(\x08R\
    \x08onGround\x12\x1d\n\nno_gravity\x18\t\x20\x01(\x08R\tnoGravity\x12\"\
    \n\x0cinvulnerable\x18\n\x20\x01(\x08R\x0cinvulnerable\x12'\n\x0fportal_\
    cooldown\x18\x0b\x20\x01(\x05R\x0eportalCooldown\x122\n\x04uuid\x18\x0c\
    \x20\x01(\x0b2\x1e.prost.minecraft_savedata.UuidR\x04uuid\x12$\n\x0bcust\
    om_name\x18\r\x20\x01(\tH\0R\ncustomName\x88\x01\x01\x12.\n\x13custom_na\
    me_visible\x18\x0e\x20\x01(\x08R\x11customNameVisible\x12\x16\n\x06silen\
    t\x18\x0f\x20\x01(\x08R\x06silent\x12\x18\n\x07glowing\x18\x10\x20\x01(\
    \x08R\x07glowingB\x0e\n\x0c_custom_name\"\x9e\x04\n\nRecipeBook\x12\x18\
    \n\x07recipes\x18\x01\x20\x03(\tR\x07recipes\x12&\n\x0fto_be_displayed\
    \x18\x02\x20\x03(\tR\rtoBeDisplayed\x124\n\x16is_filtering_craftable\x18\
    \x03\x20\x01(\x08R\x14isFilteringCraftable\x12\x1e\n\x0bis_gui_open\x18\
    \x04\x20\x01(\x08R\tisGuiOpen\x12C\n\x1eis_furnace_filtering_craftable\
    \x18\x05\x20\x01(\x08R\x1bisFurnaceFilteringCraftable\x12-\n\x13is_furna\
    ce_gui_open\x18\x06\x20\x01(\x08R\x10isFurnaceGuiOpen\x12T\n'is_blasting\
    _furnace_filtering_craftable\x18\x07\x20\x01(\x08R#isBlastingFurnaceFilt\
    eringCraftable\x12>\n\x1cis_blasting_furnace_gui_open\x18\x08\x20\x01(\
    \x08R\x18isBlastingFurnaceGuiOpen\x12A\n\x1dis_smoker_filtering_craftabl\
    e\x18\t\x20\x01(\x08R\x1aisSmokerFilteringCraftable\x12+\n\x12is_smoker_\
    gui_open\x18\n\x20\x01(\x08R\x0fisSmokerGuiOpen\"w\n\x07Vehicle\x122\n\
    \x04uuid\x18\x01\x20\x01(\x0b2\x1e.prost.minecraft_savedata.UuidR\x04uui\
    d\x128\n\x06entity\x18\x02\x20\x01(\x0b2\x20.prost.minecraft_savedata.En\
    tityR\x06entity\"\x87\x0c\n\x06Player\x12?\n\tgame_type\x18\x01\x20\x01(\
    \x0e2\".prost.minecraft_savedata.GameTypeR\x08gameType\x12P\n\x12previou\
    s_game_type\x18\x02\x20\x01(\x0e2\".prost.minecraft_savedata.GameTypeR\
    \x10previousGameType\x12\x14\n\x05score\x18\x03\x20\x01(\x03R\x05score\
    \x12\x1c\n\tdimension\x18\x04\x20\x01(\tR\tdimension\x12,\n\x12selected_\
    item_slot\x18\x05\x20\x01(\rR\x10selectedItemSlot\x12C\n\rselected_item\
    \x18\x06\x20\x01(\x0b2\x1e.prost.minecraft_savedata.ItemR\x0cselectedIte\
    m\x12,\n\x0fspawn_dimension\x18\x07\x20\x01(\tH\0R\x0espawnDimension\x88\
    \x01\x01\x12\x17\n\x07spawn_x\x18\x08\x20\x01(\x03R\x06spawnX\x12\x17\n\
    \x07spawn_y\x18\t\x20\x01(\x03R\x06spawnY\x12\x17\n\x07spawn_z\x18\n\x20\
    \x01(\x03R\x06spawnZ\x12&\n\x0cspawn_forced\x18\x0b\x20\x01(\x08H\x01R\
    \x0bspawnForced\x88\x01\x01\x12\x1f\n\x0bsleep_timer\x18\x0c\x20\x01(\rR\
    \nsleepTimer\x122\n\x15food_exhaustion_level\x18\r\x20\x01(\x02R\x13food\
    ExhaustionLevel\x122\n\x15food_saturation_level\x18\x0e\x20\x01(\x02R\
    \x13foodSaturationLevel\x12&\n\x0ffood_tick_timer\x18\x0f\x20\x01(\rR\rf\
    oodTickTimer\x12\x19\n\x08xp_level\x18\x10\x20\x01(\rR\x07xpLevel\x12\
    \x11\n\x04xp_p\x18\x11\x20\x01(\x02R\x03xpP\x12\x19\n\x08xp_total\x18\
    \x12\x20\x01(\x05R\x07xpTotal\x12\x17\n\x07xp_seed\x18\x13\x20\x01(\x05R\
    \x06xpSeed\x12<\n\tinventory\x18\x14\x20\x03(\x0b2\x1e.prost.minecraft_s\
    avedata.ItemR\tinventory\x12?\n\x0bender_items\x18\x15\x20\x03(\x0b2\x1e\
    .prost.minecraft_savedata.ItemR\nenderItems\x12A\n\tabilities\x18\x16\
    \x20\x01(\x0b2#.prost.minecraft_savedata.AbilitiesR\tabilities\x12_\n\
    \x17entered_nether_position\x18\x17\x20\x01(\x0b2\".prost.minecraft_save\
    data.Vector3dH\x02R\x15enteredNetherPosition\x88\x01\x01\x12I\n\x0croot_\
    vehicle\x18\x18\x20\x01(\x0b2!.prost.minecraft_savedata.VehicleH\x03R\
    \x0brootVehicle\x88\x01\x01\x12W\n\x14shoulder_entity_left\x18\x19\x20\
    \x01(\x0b2\x20.prost.minecraft_savedata.EntityH\x04R\x12shoulderEntityLe\
    ft\x88\x01\x01\x12Y\n\x15shoulder_entity_right\x18\x1a\x20\x01(\x0b2\x20\
    .prost.minecraft_savedata.EntityH\x05R\x13shoulderEntityRight\x88\x01\
    \x01\x12!\n\x0cseen_credits\x18\x1b\x20\x01(\x08R\x0bseenCredits\x12E\n\
    \x0brecipe_book\x18\x1c\x20\x01(\x0b2$.prost.minecraft_savedata.RecipeBo\
    okR\nrecipeBookB\x12\n\x10_spawn_dimensionB\x0f\n\r_spawn_forcedB\x1a\n\
    \x18_entered_nether_positionB\x0f\n\r_root_vehicleB\x17\n\x15_shoulder_e\
    ntity_leftB\x18\n\x16_shoulder_entity_right\"E\n\x07Players\x12:\n\x07pl\
    ayers\x18\x01\x20\x03(\x0b2\x20.prost.minecraft_savedata.PlayerR\x07play\
    ers*D\n\x08GameType\x12\x0c\n\x08SURVIVAL\x10\0\x12\x0c\n\x08CREATIVE\
    \x10\x01\x12\r\n\tADVENTURE\x10\x02\x12\r\n\tSPECTATOR\x10\x03b\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(Item::generated_message_descriptor_data());
            messages.push(Abilities::generated_message_descriptor_data());
            messages.push(Vector3d::generated_message_descriptor_data());
            messages.push(Vector2f::generated_message_descriptor_data());
            messages.push(Uuid::generated_message_descriptor_data());
            messages.push(Entity::generated_message_descriptor_data());
            messages.push(RecipeBook::generated_message_descriptor_data());
            messages.push(Vehicle::generated_message_descriptor_data());
            messages.push(Player::generated_message_descriptor_data());
            messages.push(Players::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(GameType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
