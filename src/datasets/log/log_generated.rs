// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod log {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Address, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Address(pub [u8; 4]);
impl Default for Address { 
  fn default() -> Self { 
    Self([0; 4])
  }
}
impl core::fmt::Debug for Address {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Address")
      .field("x0", &self.x0())
      .field("x1", &self.x1())
      .field("x2", &self.x2())
      .field("x3", &self.x3())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Address {}
impl<'a> flatbuffers::Follow<'a> for Address {
  type Inner = &'a Address;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Address>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Address {
  type Inner = &'a Address;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Address>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Address {
    type Output = Address;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Address as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Address {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Address {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x0: u8,
    x1: u8,
    x2: u8,
    x3: u8,
  ) -> Self {
    let mut s = Self([0; 4]);
    s.set_x0(x0);
    s.set_x1(x1);
    s.set_x2(x2);
    s.set_x3(x3);
    s
  }

  pub fn x0(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<<u8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x0(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn x1(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<<u8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[1..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x1(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[1..].as_mut_ptr(),
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn x2(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<<u8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[2..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x2(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[2..].as_mut_ptr(),
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn x3(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<<u8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[3..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x3(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[3..].as_mut_ptr(),
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum LogOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Log<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Log<'a> {
  type Inner = Log<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Log<'a> {
  pub const VT_ADDRESS: flatbuffers::VOffsetT = 4;
  pub const VT_IDENTITY: flatbuffers::VOffsetT = 6;
  pub const VT_USERID: flatbuffers::VOffsetT = 8;
  pub const VT_DATE: flatbuffers::VOffsetT = 10;
  pub const VT_REQUEST: flatbuffers::VOffsetT = 12;
  pub const VT_CODE: flatbuffers::VOffsetT = 14;
  pub const VT_SIZE_: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Log { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogArgs<'args>
  ) -> flatbuffers::WIPOffset<Log<'bldr>> {
    let mut builder = LogBuilder::new(_fbb);
    builder.add_size_(args.size_);
    if let Some(x) = args.request { builder.add_request(x); }
    if let Some(x) = args.date { builder.add_date(x); }
    if let Some(x) = args.userid { builder.add_userid(x); }
    if let Some(x) = args.identity { builder.add_identity(x); }
    if let Some(x) = args.address { builder.add_address(x); }
    builder.add_code(args.code);
    builder.finish()
  }


  #[inline]
  pub fn address(&self) -> Option<&'a Address> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Address>(Log::VT_ADDRESS, None)}
  }
  #[inline]
  pub fn identity(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Log::VT_IDENTITY, None).unwrap()}
  }
  #[inline]
  pub fn userid(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Log::VT_USERID, None).unwrap()}
  }
  #[inline]
  pub fn date(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Log::VT_DATE, None).unwrap()}
  }
  #[inline]
  pub fn request(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Log::VT_REQUEST, None).unwrap()}
  }
  #[inline]
  pub fn code(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(Log::VT_CODE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn size_(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Log::VT_SIZE_, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Log<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Address>("address", Self::VT_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("identity", Self::VT_IDENTITY, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("userid", Self::VT_USERID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("date", Self::VT_DATE, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("request", Self::VT_REQUEST, true)?
     .visit_field::<u16>("code", Self::VT_CODE, false)?
     .visit_field::<u64>("size_", Self::VT_SIZE_, false)?
     .finish();
    Ok(())
  }
}
pub struct LogArgs<'a> {
    pub address: Option<&'a Address>,
    pub identity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub userid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub request: Option<flatbuffers::WIPOffset<&'a str>>,
    pub code: u16,
    pub size_: u64,
}
impl<'a> Default for LogArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogArgs {
      address: None,
      identity: None, // required field
      userid: None, // required field
      date: None, // required field
      request: None, // required field
      code: 0,
      size_: 0,
    }
  }
}

pub struct LogBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_address(&mut self, address: &Address) {
    self.fbb_.push_slot_always::<&Address>(Log::VT_ADDRESS, address);
  }
  #[inline]
  pub fn add_identity(&mut self, identity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Log::VT_IDENTITY, identity);
  }
  #[inline]
  pub fn add_userid(&mut self, userid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Log::VT_USERID, userid);
  }
  #[inline]
  pub fn add_date(&mut self, date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Log::VT_DATE, date);
  }
  #[inline]
  pub fn add_request(&mut self, request: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Log::VT_REQUEST, request);
  }
  #[inline]
  pub fn add_code(&mut self, code: u16) {
    self.fbb_.push_slot::<u16>(Log::VT_CODE, code, 0);
  }
  #[inline]
  pub fn add_size_(&mut self, size_: u64) {
    self.fbb_.push_slot::<u64>(Log::VT_SIZE_, size_, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Log<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Log::VT_IDENTITY,"identity");
    self.fbb_.required(o, Log::VT_USERID,"userid");
    self.fbb_.required(o, Log::VT_DATE,"date");
    self.fbb_.required(o, Log::VT_REQUEST,"request");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Log<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Log");
      ds.field("address", &self.address());
      ds.field("identity", &self.identity());
      ds.field("userid", &self.userid());
      ds.field("date", &self.date());
      ds.field("request", &self.request());
      ds.field("code", &self.code());
      ds.field("size_", &self.size_());
      ds.finish()
  }
}
pub enum LogsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Logs<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Logs<'a> {
  type Inner = Logs<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Logs<'a> {
  pub const VT_LOGS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Logs { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogsArgs<'args>
  ) -> flatbuffers::WIPOffset<Logs<'bldr>> {
    let mut builder = LogsBuilder::new(_fbb);
    if let Some(x) = args.logs { builder.add_logs(x); }
    builder.finish()
  }


  #[inline]
  pub fn logs(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Log<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Log>>>>(Logs::VT_LOGS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Logs<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Log>>>>("logs", Self::VT_LOGS, true)?
     .finish();
    Ok(())
  }
}
pub struct LogsArgs<'a> {
    pub logs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Log<'a>>>>>,
}
impl<'a> Default for LogsArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogsArgs {
      logs: None, // required field
    }
  }
}

pub struct LogsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_logs(&mut self, logs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Log<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Logs::VT_LOGS, logs);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Logs<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Logs::VT_LOGS,"logs");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Logs<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Logs");
      ds.field("logs", &self.logs());
      ds.finish()
  }
}
}  // pub mod log

