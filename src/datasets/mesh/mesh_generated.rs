// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod mesh {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::EndianScalar;

    // struct Vector3, aligned to 4
    #[repr(C, align(4))]
    #[derive(Clone, Copy, Debug, PartialEq)]
    pub struct Vector3 {
        x_: f32,
        y_: f32,
        z_: f32,
    } // pub struct Vector3
    impl flatbuffers::SafeSliceAccess for Vector3 {}
    impl<'a> flatbuffers::Follow<'a> for Vector3 {
        type Inner = &'a Vector3;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a Vector3>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a Vector3 {
        type Inner = &'a Vector3;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<Vector3>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for Vector3 {
        type Output = Vector3;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(self as *const Vector3 as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }
    impl<'b> flatbuffers::Push for &'b Vector3 {
        type Output = Vector3;

        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(*self as *const Vector3 as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }

    impl Vector3 {
        pub fn new<'a>(_x: f32, _y: f32, _z: f32) -> Self {
            Vector3 {
                x_: _x.to_little_endian(),
                y_: _y.to_little_endian(),
                z_: _z.to_little_endian(),
            }
        }
        pub fn x<'a>(&'a self) -> f32 {
            self.x_.from_little_endian()
        }
        pub fn y<'a>(&'a self) -> f32 {
            self.y_.from_little_endian()
        }
        pub fn z<'a>(&'a self) -> f32 {
            self.z_.from_little_endian()
        }
    }

    // struct Triangle, aligned to 4
    #[repr(C, align(4))]
    #[derive(Clone, Copy, Debug, PartialEq)]
    pub struct Triangle {
        v0_: Vector3,
        v1_: Vector3,
        v2_: Vector3,
        normal_: Vector3,
    } // pub struct Triangle
    impl flatbuffers::SafeSliceAccess for Triangle {}
    impl<'a> flatbuffers::Follow<'a> for Triangle {
        type Inner = &'a Triangle;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a Triangle>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a Triangle {
        type Inner = &'a Triangle;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<Triangle>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for Triangle {
        type Output = Triangle;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(self as *const Triangle as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }
    impl<'b> flatbuffers::Push for &'b Triangle {
        type Output = Triangle;

        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(*self as *const Triangle as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }

    impl Triangle {
        pub fn new<'a>(
            _v0: &'a Vector3,
            _v1: &'a Vector3,
            _v2: &'a Vector3,
            _normal: &'a Vector3,
        ) -> Self {
            Triangle {
                v0_: *_v0,
                v1_: *_v1,
                v2_: *_v2,
                normal_: *_normal,
            }
        }
        pub fn v0<'a>(&'a self) -> &'a Vector3 {
            &self.v0_
        }
        pub fn v1<'a>(&'a self) -> &'a Vector3 {
            &self.v1_
        }
        pub fn v2<'a>(&'a self) -> &'a Vector3 {
            &self.v2_
        }
        pub fn normal<'a>(&'a self) -> &'a Vector3 {
            &self.normal_
        }
    }

    pub enum MeshOffset {}
    #[derive(Copy, Clone, Debug, PartialEq)]

    pub struct Mesh<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Mesh<'a> {
        type Inner = Mesh<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf: buf, loc: loc },
            }
        }
    }

    impl<'a> Mesh<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Mesh { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args MeshArgs<'args>,
        ) -> flatbuffers::WIPOffset<Mesh<'bldr>> {
            let mut builder = MeshBuilder::new(_fbb);
            if let Some(x) = args.triangles {
                builder.add_triangles(x);
            }
            builder.finish()
        }

        pub const VT_TRIANGLES: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn triangles(&self) -> &'a [Triangle] {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<Triangle>>>(
                    Mesh::VT_TRIANGLES,
                    None,
                )
                .map(|v| v.safe_slice())
                .unwrap()
        }
    }

    pub struct MeshArgs<'a> {
        pub triangles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Triangle>>>,
    }
    impl<'a> Default for MeshArgs<'a> {
        #[inline]
        fn default() -> Self {
            MeshArgs {
                triangles: None, // required field
            }
        }
    }
    pub struct MeshBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> MeshBuilder<'a, 'b> {
        #[inline]
        pub fn add_triangles(
            &mut self,
            triangles: flatbuffers::WIPOffset<flatbuffers::Vector<'b, Triangle>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Mesh::VT_TRIANGLES, triangles);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MeshBuilder<'a, 'b> {
            let start = _fbb.start_table();
            MeshBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Mesh<'a>> {
            let o = self.fbb_.end_table(self.start_);
            self.fbb_.required(o, Mesh::VT_TRIANGLES, "triangles");
            flatbuffers::WIPOffset::new(o.value())
        }
    }
} // pub mod mesh
