// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod mesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Vector3, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vector3(pub [u8; 12]);
impl Default for Vector3 { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Vector3 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vector3")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vector3 {}
impl<'a> flatbuffers::Follow<'a> for Vector3 {
  type Inner = &'a Vector3;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vector3>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vector3 {
  type Inner = &'a Vector3;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vector3>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vector3 {
    type Output = Vector3;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vector3 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vector3 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vector3 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
    z: f32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Triangle, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Triangle(pub [u8; 48]);
impl Default for Triangle { 
  fn default() -> Self { 
    Self([0; 48])
  }
}
impl core::fmt::Debug for Triangle {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Triangle")
      .field("v0", &self.v0())
      .field("v1", &self.v1())
      .field("v2", &self.v2())
      .field("normal", &self.normal())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Triangle {}
impl<'a> flatbuffers::Follow<'a> for Triangle {
  type Inner = &'a Triangle;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Triangle>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Triangle {
  type Inner = &'a Triangle;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Triangle>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Triangle {
    type Output = Triangle;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Triangle as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Triangle {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Triangle {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    v0: &Vector3,
    v1: &Vector3,
    v2: &Vector3,
    normal: &Vector3,
  ) -> Self {
    let mut s = Self([0; 48]);
    s.set_v0(v0);
    s.set_v1(v1);
    s.set_v2(v2);
    s.set_normal(normal);
    s
  }

  pub fn v0(&self) -> &Vector3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[0..].as_ptr() as *const Vector3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_v0(&mut self, x: &Vector3) {
    self.0[0..0 + 12].copy_from_slice(&x.0)
  }

  pub fn v1(&self) -> &Vector3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[12..].as_ptr() as *const Vector3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_v1(&mut self, x: &Vector3) {
    self.0[12..12 + 12].copy_from_slice(&x.0)
  }

  pub fn v2(&self) -> &Vector3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[24..].as_ptr() as *const Vector3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_v2(&mut self, x: &Vector3) {
    self.0[24..24 + 12].copy_from_slice(&x.0)
  }

  pub fn normal(&self) -> &Vector3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[36..].as_ptr() as *const Vector3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_normal(&mut self, x: &Vector3) {
    self.0[36..36 + 12].copy_from_slice(&x.0)
  }

}

pub enum MeshOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Mesh<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Mesh<'a> {
  type Inner = Mesh<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Mesh<'a> {
  pub const VT_TRIANGLES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Mesh { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args MeshArgs<'args>
  ) -> flatbuffers::WIPOffset<Mesh<'bldr>> {
    let mut builder = MeshBuilder::new(_fbb);
    if let Some(x) = args.triangles { builder.add_triangles(x); }
    builder.finish()
  }


  #[inline]
  pub fn triangles(&self) -> flatbuffers::Vector<'a, Triangle> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Triangle>>>(Mesh::VT_TRIANGLES, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Mesh<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Triangle>>>("triangles", Self::VT_TRIANGLES, true)?
     .finish();
    Ok(())
  }
}
pub struct MeshArgs<'a> {
    pub triangles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Triangle>>>,
}
impl<'a> Default for MeshArgs<'a> {
  #[inline]
  fn default() -> Self {
    MeshArgs {
      triangles: None, // required field
    }
  }
}

pub struct MeshBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MeshBuilder<'a, 'b> {
  #[inline]
  pub fn add_triangles(&mut self, triangles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Triangle>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mesh::VT_TRIANGLES, triangles);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MeshBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MeshBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Mesh<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Mesh::VT_TRIANGLES,"triangles");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Mesh<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Mesh");
      ds.field("triangles", &self.triangles());
      ds.finish()
  }
}
}  // pub mod mesh

