// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 31.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `log.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:prost.log.Address)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Address {
    // message fields
    // @@protoc_insertion_point(field:prost.log.Address.x0)
    pub x0: u32,
    // @@protoc_insertion_point(field:prost.log.Address.x1)
    pub x1: u32,
    // @@protoc_insertion_point(field:prost.log.Address.x2)
    pub x2: u32,
    // @@protoc_insertion_point(field:prost.log.Address.x3)
    pub x3: u32,
    // special fields
    // @@protoc_insertion_point(special_field:prost.log.Address.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Address {
    fn default() -> &'a Address {
        <Address as ::protobuf::Message>::default_instance()
    }
}

impl Address {
    pub fn new() -> Address {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x0",
            |m: &Address| { &m.x0 },
            |m: &mut Address| { &mut m.x0 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x1",
            |m: &Address| { &m.x1 },
            |m: &mut Address| { &mut m.x1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x2",
            |m: &Address| { &m.x2 },
            |m: &mut Address| { &mut m.x2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x3",
            |m: &Address| { &m.x3 },
            |m: &mut Address| { &mut m.x3 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Address>(
            "Address",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Address {
    const NAME: &'static str = "Address";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x0 = is.read_uint32()?;
                },
                16 => {
                    self.x1 = is.read_uint32()?;
                },
                24 => {
                    self.x2 = is.read_uint32()?;
                },
                32 => {
                    self.x3 = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x0 != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.x0);
        }
        if self.x1 != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.x1);
        }
        if self.x2 != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.x2);
        }
        if self.x3 != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.x3);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x0 != 0 {
            os.write_uint32(1, self.x0)?;
        }
        if self.x1 != 0 {
            os.write_uint32(2, self.x1)?;
        }
        if self.x2 != 0 {
            os.write_uint32(3, self.x2)?;
        }
        if self.x3 != 0 {
            os.write_uint32(4, self.x3)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Address {
        Address::new()
    }

    fn clear(&mut self) {
        self.x0 = 0;
        self.x1 = 0;
        self.x2 = 0;
        self.x3 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Address {
        static instance: Address = Address {
            x0: 0,
            x1: 0,
            x2: 0,
            x3: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Address {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Address").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Address {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.log.Log)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Log {
    // message fields
    // @@protoc_insertion_point(field:prost.log.Log.address)
    pub address: ::protobuf::MessageField<Address>,
    // @@protoc_insertion_point(field:prost.log.Log.identity)
    pub identity: ::std::string::String,
    // @@protoc_insertion_point(field:prost.log.Log.userid)
    pub userid: ::std::string::String,
    // @@protoc_insertion_point(field:prost.log.Log.date)
    pub date: ::std::string::String,
    // @@protoc_insertion_point(field:prost.log.Log.request)
    pub request: ::std::string::String,
    // @@protoc_insertion_point(field:prost.log.Log.code)
    pub code: u32,
    // @@protoc_insertion_point(field:prost.log.Log.size)
    pub size: u64,
    // special fields
    // @@protoc_insertion_point(special_field:prost.log.Log.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Log {
    fn default() -> &'a Log {
        <Log as ::protobuf::Message>::default_instance()
    }
}

impl Log {
    pub fn new() -> Log {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Address>(
            "address",
            |m: &Log| { &m.address },
            |m: &mut Log| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "identity",
            |m: &Log| { &m.identity },
            |m: &mut Log| { &mut m.identity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "userid",
            |m: &Log| { &m.userid },
            |m: &mut Log| { &mut m.userid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "date",
            |m: &Log| { &m.date },
            |m: &mut Log| { &mut m.date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request",
            |m: &Log| { &m.request },
            |m: &mut Log| { &mut m.request },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &Log| { &m.code },
            |m: &mut Log| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &Log| { &m.size },
            |m: &mut Log| { &mut m.size },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Log>(
            "Log",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Log {
    const NAME: &'static str = "Log";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.address)?;
                },
                18 => {
                    self.identity = is.read_string()?;
                },
                26 => {
                    self.userid = is.read_string()?;
                },
                34 => {
                    self.date = is.read_string()?;
                },
                42 => {
                    self.request = is.read_string()?;
                },
                48 => {
                    self.code = is.read_uint32()?;
                },
                56 => {
                    self.size = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.identity.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.identity);
        }
        if !self.userid.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.userid);
        }
        if !self.date.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.date);
        }
        if !self.request.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.request);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.code);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.size);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.identity.is_empty() {
            os.write_string(2, &self.identity)?;
        }
        if !self.userid.is_empty() {
            os.write_string(3, &self.userid)?;
        }
        if !self.date.is_empty() {
            os.write_string(4, &self.date)?;
        }
        if !self.request.is_empty() {
            os.write_string(5, &self.request)?;
        }
        if self.code != 0 {
            os.write_uint32(6, self.code)?;
        }
        if self.size != 0 {
            os.write_uint64(7, self.size)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Log {
        Log::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.identity.clear();
        self.userid.clear();
        self.date.clear();
        self.request.clear();
        self.code = 0;
        self.size = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Log {
        static instance: Log = Log {
            address: ::protobuf::MessageField::none(),
            identity: ::std::string::String::new(),
            userid: ::std::string::String::new(),
            date: ::std::string::String::new(),
            request: ::std::string::String::new(),
            code: 0,
            size: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Log {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Log").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Log {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:prost.log.Logs)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Logs {
    // message fields
    // @@protoc_insertion_point(field:prost.log.Logs.logs)
    pub logs: ::std::vec::Vec<Log>,
    // special fields
    // @@protoc_insertion_point(special_field:prost.log.Logs.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Logs {
    fn default() -> &'a Logs {
        <Logs as ::protobuf::Message>::default_instance()
    }
}

impl Logs {
    pub fn new() -> Logs {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "logs",
            |m: &Logs| { &m.logs },
            |m: &mut Logs| { &mut m.logs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Logs>(
            "Logs",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Logs {
    const NAME: &'static str = "Logs";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.logs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.logs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Logs {
        Logs::new()
    }

    fn clear(&mut self) {
        self.logs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Logs {
        static instance: Logs = Logs {
            logs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Logs {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Logs").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Logs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logs {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tlog.proto\x12\tprost.log\"I\n\x07Address\x12\x0e\n\x02x0\x18\x01\x20\
    \x01(\rR\x02x0\x12\x0e\n\x02x1\x18\x02\x20\x01(\rR\x02x1\x12\x0e\n\x02x2\
    \x18\x03\x20\x01(\rR\x02x2\x12\x0e\n\x02x3\x18\x04\x20\x01(\rR\x02x3\"\
    \xbd\x01\n\x03Log\x12,\n\x07address\x18\x01\x20\x01(\x0b2\x12.prost.log.\
    AddressR\x07address\x12\x1a\n\x08identity\x18\x02\x20\x01(\tR\x08identit\
    y\x12\x16\n\x06userid\x18\x03\x20\x01(\tR\x06userid\x12\x12\n\x04date\
    \x18\x04\x20\x01(\tR\x04date\x12\x18\n\x07request\x18\x05\x20\x01(\tR\
    \x07request\x12\x12\n\x04code\x18\x06\x20\x01(\rR\x04code\x12\x12\n\x04s\
    ize\x18\x07\x20\x01(\x04R\x04size\"*\n\x04Logs\x12\"\n\x04logs\x18\x01\
    \x20\x03(\x0b2\x0e.prost.log.LogR\x04logsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Address::generated_message_descriptor_data());
            messages.push(Log::generated_message_descriptor_data());
            messages.push(Logs::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
